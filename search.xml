<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[pyscript 소개]]></title>
      <url>/articles/2022-06/pyscript</url>
      <content type="text"><![CDATA[소개python을 html에서 구동하게 해주는, PyScript에 대하여 간략하게 알아봅니다.PyScript 란?  python을 html에서 그대로 구동하게 하는것, 즉 javascript처럼 구동 가능하다.  PyCon US (2022-04-27 ~ 2022-05-03) 에서, 발표(alpha 버전)되었다.                  현재(2022-06) 발표된 버전(alpha)이고, 공식 페이지에서도 상업용 사이트에서의 사용은 주의하라고 되어 있다.                    hello world&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;  &lt;head&gt;    &lt;meta charset="utf-8" /&gt;    &lt;meta name="viewport" content="width=device-width,initial-scale=1" /&gt;    &lt;title&gt;PyScript Hello World&lt;/title&gt;    &lt;link rel="icon" type="image/png" href="favicon.png" /&gt;    &lt;link rel="stylesheet" href="https://pyscript.net/alpha/pyscript.css" /&gt;    &lt;script defer src="https://pyscript.net/alpha/pyscript.js"&gt;&lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;    Hello world! &lt;br&gt;    This is the current date and time, as computed by Python:    &lt;py-script&gt;        from datetime import datetime        now = datetime.now()        now.strftime("%m/%d/%Y, %H:%M:%S")    &lt;/py-script&gt;  &lt;/body&gt;&lt;/html&gt;  ref: https://github.com/pyscript/pyscript/blob/main/examples/hello_world.html  위 코드를 생성하여 실제 구동해보면, javascripg처럼 실제 구동되어서 화면에 날자가 프린트 되는걸 확인 할 수 있다.  코드를 분석해보면, pyscript.js 파일을 로드하고 있음을 알 수 있다. 해당 파일이 py-script을 구동하게 해준다.  code and result 보기  PyScript simple architecturepyscript가 나오게된 배경  javascript는 client언어로 시작하여, server언어(node.js)로 확장되었다.  그렇다면 server언어인 pyhton은 반대로 client언어(PyScript)로 확장 할 수 있지 않을까?          이러한 요구(잠재적 고객들 === python을 사용하는 개발자)가 있었다.      기술의 발전(사실상 webassemble 발전)으로 가능하게 됨. === PyScript      pyscript의 의미  python의 생태계(수많은 library, component 등등) 이 → web 생태계로, web생태계의 확장  anaconda 팀에서 말하길          PyScript(Pyhton)을 활용하여 FE개발자가 web application을 만들수 있게 될꺼다.      데이터 과학자 입장에서 html file을 이용하여, dashboard와 models을 공유하고, browser을 통해서 구동 할 수 있게 한다.      Figuare 1. PyScript overview (ref: https://anaconda.cloud/api/files/de4b3735-17cf-4165-9dff-75102dbbd240)pyscript는 어떻게 구동되는가?Figure 2. PyScript Tech Stack. (ref: https://anaconda.cloud/api/files/31ea07ba-dadc-4d18-b79e-d309328762d0)  Pyodide 라고 불리는 webassembly 로 구성된 pyton용 wasm을 통해서 구동된다.  즉 webassembly을 이용하여 구동된다. 따라서 각 browser vendor가 javascript engine와 같은 어떤 별도의 python engine을 browser에 가지고 있지 않아도 구동된다! (일단 현재는…)          개인적으로는 만약 python 개발자의 유입이 많아지면 사실상 native(browser) 에서 직접 제공도 할 수 있다고 생각한다. (그럼 javascript + python 투트랙?!? ← 먼훗날 확인하기로)        webassembly가 1.0을 발표(2019.12)하고, 약 2년만에 이렇게, python이 구동가능할 정도로 발전하다니 정말 놀랍다.          이런식이라면, 정말로, webassermbly는 다른 언어들, 특히나 script형 function형 언어들의 porting을 기대해볼만 할듯 하다.      PyScript Examplepyscript의 주요 구성 요소  py-env: Python 코드를 실행하는데 필요한 Python 패키지를 정의한다.          https://github.com/pyscript/pyscript/blob/main/examples/panel_stream.html#L38-L43          &lt;py-env&gt;      - bokeh      - numpy      - pandas      - panel==0.13.1  &lt;/py-env&gt;        py-script: Python 코드를 작성할수 있는 영역 태그. 혹은 Pyton 코드 file을 src로 로드하는 태그.          &lt;script&gt; 태그와 유사하다.      https://github.com/pyscript/pyscript/blob/main/examples/panel_stream.html#L69-L115          &lt;!-- 아래와 같이 python 파일을 로드 하던가 --&gt;  &lt;py-script src="/python_file.py"&gt;&lt;/py-script&gt;  &lt;!-- 또는 아래와 같이 python코드를 작성 할 수 있다.--&gt;  &lt;py-script&gt;  	from datetime import datetime  	now = datetime.now()  	now.strftime("%m/%d/%Y, %H:%M:%S")  &lt;/py-script&gt;        py-repl(Read Eval Print Loop): REPL을 바로 할 수 있게 해준다.          https://github.com/pyscript/pyscript/blob/main/examples/panel_deckgl.html#L70              code and result 보기    그외 핵심요소  Python ecosystem: 유명하고, 유용한 아주 많은 Python 패키지를 사용할 수 있다. (such as numpy, pandas, scikit-learn, and more)  Python with JavaScript: Javascript와 Python양방향으로 객체(objects)와 namespaces에 접근하고 통신(사용) 할 수 있다.(이 부분의 deep한 기술 내용은 Pyodied의 js ↔ python간 사용 관련 문서를 참고)  Environment management: 사용자가 사용하고자하는 python패키지를 정의하고 관리할 수 있다.(py-env)  Visual application development: 버튼, 컨테이너, 텍스트박스 등 즉시 사용가능한 UI요소를 제공하고 있다.정리  PyScript 는 python을 on browser에서 구동하게 해준다. (PyScript brings Python to the browser.)  Browser에서 python엔진을 제공하는건 아니고 webassembly기술을 활용하여 제공되고 있다.  이제 alpha version으로 시작이지만, python의 미래이자 web기술(생태계)의 확장이다. (아직 tensorflow등은 구동 안된다고 한다…)  web(FE) 개발자라면 매우 관심있게 지켜볼 주제라고 본다.(python 도 공부해서 같이 쓰자~)참고  공식홈페이지: https://pyscript.net/  아나콘다 문서: https://anaconda.cloud/pyscript-python-in-the-browser  Getting Started: https://github.com/pyscript/pyscript/blob/main/docs/tutorials/getting-started.md  python 기사: https://realpython.com/python-news-april-2022/  git: https://github.com/pyscript?type=source  examples: https://github.com/pyscript/pyscript/tree/main/examples  Pyodide: https://pyodide.org/en/stable/index.html          js가 python사용하기: https://pyodide.org/en/stable/usage/quickstart.html#accessing-python-scope-from-javascript      python이 js사용하기: https://pyodide.org/en/stable/usage/quickstart.html#accessing-javascript-scope-from-python        webassembly: https://webassembly.org/]]></content>
      <categories>
        
          <category> tech talk </category>
        
      </categories>
      <tags>
        
          <tag> pyscript </tag>
        
          <tag> javascript </tag>
        
          <tag> webassembly </tag>
        
          <tag> tech basic </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[png, jpg, 이미지 용량 줄이기]]></title>
      <url>/articles/2021-06/Image-size-optimize</url>
      <content type="text"><![CDATA[소개web환경에서 resource의 용량은 성능에 매우 큰 영향을 준다. 따라서 여러가지 기법을 이용해서 이를 해결하게 된다. 이런 기법에는 splite image사용, resource cache, device rosolution에 따른 resource 서빙, image crop, image reszie 등등이 있다. 실제 매우 많은 사람이 사용하는 포털 서비스에서도 이러한 기법을 사용한다.실제 포털에서의 예(다음카카오)  실제 서비스되는 이미지의 용량: 12.4kB  주소:          https://search1.daumcdn.net/thumb/C200x278.fwebp.q85/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2F3jtQ%2Fimage%2FCXQeP3cgNqaOGX9_Dx7a9mlt41U.png        주소를 잘 보면 여러 정보를 볼 수 있다          200x278크기로 crop      quality: 85%      원본 이미지 주소: http://t1.daumcdn.net/brunch/service/user/3jtQ/image/CXQeP3cgNqaOGX9_Dx7a9mlt41U.png      실제 원본 이미지의 경우 아래와 같이 192kB 임을 볼 수 있다.            정리하면, 원본 192kB → 이미지 최적화 + 이미지 crop → 12.kB로 사용됨을 알 수 있다.실제 포털에서의 예(네이버)  실제 서비스되는 이미지의 용량: 18.8kB  주소:          https://search.pstatic.net/common/?autoRotate=true&amp;quality=95&amp;type=f174_174&amp;src=https%3A%2F%2Fldb-phinf.pstatic.net%2F20150831_267%2F1441008970338JWBLo_JPEG%2F11630456_0.jpg        주소로 알 수 있는 정보          174_174 크기로 crop      quality: 95%      원본 이미지 주소: https://ldb-phinf.pstatic.net/20150831_267/1441008970338JWBLo_JPEG/11630456_0.jpg      실제 원본 이미지의 경우 아래와 같이 184kB임을 볼 수 있다.            정리하면, 원본 184kB → 이미지 최적화 + 이미지 crop → 18.8kB로 사용됨을 알 수 있다.대형 포탈이 아닌 개인이 서비스(블로그 등) 할때, 위의 예와 같은 처리를 하려면, 이미지 캐시 서버 혹은 이미지 처리 서버를 직접 구현하여야 한다. 하지만 개인 서비스에서 이런 추가 서비스를 별개로 구현하기는 쉽지 않다. 따라서 이러한 이미지 처리 서버 서비스를 이용해야한다. 본 글에서는, 이러한 이미지 최적화 처리를 개인이 쉽게 할 수 있는, TinyPNG 서비스를 소개한다.TinyPNG  앞선 소개에서 이야기한 기능을 제공하는 서비스이다.  기본적으로 web상에서 drag and drop 으로 쉽게 이미지를 최적화 할 수 있다  기술적으로는 png, jpg(파일의) 불필요한 meta을 제거하고, 24bit png file을 8bit indexed color형태로 변환한다고 되어 있다. (This technique is called “quantization”. By reducing the number of colors, 24-bit PNG files can be converted to much smaller 8-bit indexed color images.)CDN기능  https://tinify.com/cdn/documentation#configuration  web에서 직접 변환와 다르게 위 포탈의 형태와 비슷하게, image을 cdn형태로 서빙해주는 서비스 이다.          맨 앞의 소개쪽의 다음, 네이버 등의 포탈이 제공하는 이미지 서버(CDN server)형태와 동일한 형태.        현재(2021.06) beta서비스 중이며, 해당 기능은 무료가 없고 유료만 있다.  TinyPNG의 CDN document을 살펴보면 아래와 같이 기존 image을 tinifycdn 주소로 변환하여 사용하도록 가이드 한다.                  즉 이미지 자체를 TinyPNG에서 서빙해주는 형태이다.          **Before**  &lt;img src="/images/logo.jpg"/&gt;  &lt;img src="https://images.example.com/images/header.jpg"/&gt;                  **After**  &lt;img src="https://xxxxxxxx.tinifycdn.com/images/logo.jpg"/&gt;  &lt;img src="https://xxxxxxxx.tinifycdn.com/images/header.jpg"/&gt;                    API 기능  https://tinypng.com/developers/reference  REST API로 image 변환 처리를 가능하게 제공하고 있다.  무료로 월 500건까지 사용 가능하다  기존적으로 ajax을 curl등으로 직접 호출도 가능하고, 여러 언어에서 사용하기 쉽게 lib도 제공하고 있다.          Ruby, php, Node.js, Python, Java, .Net 의 lib지원      api auth생성  당연히 api를 막쓰는건 아니고, 사용자 등록을 하여 api key을 발급 받아야 한다.  https://tinypng.com/developers  페이지에서 e-mail로 인증하면 개발자 계정 로그인이 가능하다.  로그인 이후 https://tinify.com/dashboard/api  로 접속하면 본인의 Dashboard로 접근 가능하다.  해당 Dashboard 에서 ‘Add api key’을 통해서 api key을 발급 받을 수 있다.Api 사용  HTTP(Rest Api)도 있기 때문에 ajax로 호출해서 사용하거나, 제공되는 lib의 형태로 사용하면 된다.      node.js의 예      npm install --save tinify  혹은  yarn add -D tinyify          const tinify = require("tinify");  tinify.key = "YOUR_API_KEY";  // auth 체크  const check = async () =&gt; {    return new Promise((resolve, reject) =&gt; {  	  tinify.validate(function(err) {  		  if (err) {          reject(err); // Validation of API key failed.          return;        }  		  // validate 이후 compression count을 알 수 있다.  		  // 무료 500 이하로 사용하고 싶을때 해당값을 check해서 사용 가능하다.  			let compressionsThisMonth = tinify.compressionCount;        resolve();  		})    });  }  // optimize (compress)  // srcPath: 소스 이미지 path  // targetPath: 타켓 이미지 path  // local에서 구동시 소스와 타겟 위치가 같으면 소스가 compress되서 덮어써진다.  const compress = async (srcPath, targetPath) =&gt; {    const source = tinify.fromFile(srcPath); // fromFile이 tinyPNG의 Source클래스를 리턴한다.    return source.toFile(targetPath); // source.toFile은 Promise을 리턴한다.  }      그외 https://tinypng.com/analyzer 에서 코드(이미지) 분석이나, photoshop plugin도 제공되고 있다.활용  개인적으로는, jekyll을 통한 blog post을 할때, image source을 optimization(compress)하는 간단한 node 코드를 작성해서 사용중이다.  월 500회 제약이 있어서, 한번 줄인 이미지는 다시 줄이지 않도록 하는 처리를 간략하게 파일로 사용하고 있다      코드(image-optimize.js)      #!/usr/bin/env node  const fs = require('fs');  const path = require('path');  const tinify = require('tinify');  const prevListPath = path.resolve(__dirname, '.optimizelist');  const { log, error } = console;  const exit = (code = 0, fn) =&gt; {    (fn &amp;&amp; fn()) || process.exit(code);  }  const checkTargetArgs = async () =&gt; {    const targetArgs = process.argv.slice(2);    if (!targetArgs || targetArgs.length === 0) {      const msg1 = `&gt; Error: There are no target path !!!`;      const msg2 = `&gt; Error: Plz pass the target path 'node image-optimize.js {:targetPath}'`;      return Promise.reject(`${msg1}\n${msg2}`);    }    log(`&gt; Check targets: ${targetArgs}`);    tinify.mytarget = [...targetArgs];    return Promise.resolve(tinify.mytarget);  }  const checkAPIKey = async () =&gt; {    const { TINYPNG_API_TOKEN } = process.env;    log(`&gt; Check tinypng api key: ${TINYPNG_API_TOKEN}`);    return new Promise((resolve, reject) =&gt; {      if (!TINYPNG_API_TOKEN) {        const msg1 = `&gt; Error: There are no TINYPNG_API_TOKEN !!!`;        const msg2 = `&gt; Error: Plz check 'export TINYPNG_API_TOKEN={:tinypng api token}' in your .bashrc or .zshrc`;        return reject(`${msg1}\n${msg2}`);      }      tinify.key = TINYPNG_API_TOKEN;      tinify.validate((err) =&gt; {        if (err) {          return reject(err);        }        return resolve(tinify.compressionCount);      });    });  }  const createTargetFilePathList = (source, list = []) =&gt; {    if (!fs.existsSync(source)) return list;    if (fs.lstatSync(source).isDirectory()) {      const files = fs.readdirSync(source);      const q = [...files].reduce((acc, curfile) =&gt; {        const curSource = path.join(source, curfile);        return createTargetFilePathList(curSource, acc);      }, []);      return [...list, ...q];    }    return [...list, source];  }  const getPrevOptimizeList = async () =&gt; {    const text = fs.readFileSync(prevListPath, {encoding:'utf8', flag:'r'});    const list = JSON.parse(text).data || [];    return Promise.resolve(list);  }  const setPrevOptimizeList = async (list) =&gt; {    log('&gt; Optimize history write...')    return new Promise((resolve) =&gt; {      const text = JSON.stringify({ data: list }, null , 2);      fs.writeFile(prevListPath, text, {encoding:'utf8', flag:'w'}, (err) =&gt; {        if (err) {          return reject(`&gt; Error: Optimize history write !!!`);        };        resolve(list);      });    });  }  const getTargetPathList = async (targetArgs) =&gt; {    const paths = targetArgs.reduce((list, targetArg) =&gt; {      return createTargetFilePathList(targetArg, list);    }, []);    const prevPaths = [...await getPrevOptimizeList()];    const filteredList = paths.filter((p) =&gt; {      return prevPaths.indexOf(p) === -1;    });    return Promise.resolve({ targetPathList: filteredList, prevList: prevPaths });  }  const compressFile = async (source) =&gt; {    // png, jpg 만된다    const ext = path.parse(source).ext.toLowerCase();    if (ext === '.png' || ext === '.jpg' || ext === '.jpeg') {      const src = tinify.fromFile(source);      return src.toFile(source).then(() =&gt; source);    }    // 그외 확장자는 그대로 pass    return Promise.resolve(source);  }  const compress = async ({ targetPathList, prevList }) =&gt; {    for (const source of targetPathList) {      log(`&gt; Optimize progress... [${source}]`);      const complete = await compressFile(source);      prevList.push(complete);      log(`&gt; Optimize complete... [${complete}]`);    }    return Promise.resolve(prevList);  }  // run  (async () =&gt; {    log('!! Image Optimize Run !!');    checkAPIKey()      .then(checkTargetArgs)      .then(getTargetPathList)      .then(compress)      .then(setPrevOptimizeList)      .then(() =&gt; log('!! Image Optimize Done !!'))      .catch((msg) =&gt; {        return exit(-1, () =&gt; {          error(msg);          error(`!! Image Optimize Failure  !!`);        });      });  })();        실제 구동    node image-optimize.js {:targetPath} 형태로 사용중이다.        ## 정리          이미지 최적화는 서비스 품질와 성능을 높인다.      실제 포탈등에서는 여러 기법으로 이미지 최적화를 하여 서비스 한다.      개인이 직접 이미지 최적화 서비스를 구현하기 힘들수 있는데 무료로 사용가능한 tinyPNG가 있다.      REST API나 대중적인 언어의 lib도 제공되고 있다.      해당 방법을 응용하면 본인의 서비스의 image 서비스를 최적화하여, 서비스의 품질을 높일 수 있다!!      꼭 해당 서비스가 아니여도, 실제 서비스 전에 resource최적화(e.g. java의 image 최적화 lib을 쓴다던가…. 하는등의 작업)는 꼭 해주는게 좋을듯 하다.!      ]]></content>
      <categories>
        
          <category> tech talk </category>
        
      </categories>
      <tags>
        
          <tag> javascript </tag>
        
          <tag> nodejs </tag>
        
          <tag> tech basic </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Javascript Module System (CJS, AMD, UMD, ESM)]]></title>
      <url>/articles/2021-06/Javascript-Module-System-CJS-AMD-UMD-ESM</url>
      <content type="text"><![CDATA[소개javascript의 module system의 탄생 배경(히스토리)을 알아보고, 이어서 현재 대표적인 javascript module system인 cjs, amd, umd, esm에 대해서 간략하게 알아본다.배경초창기 javascript는 module의 기능 or 개념이 없었고, javascript의 구동환경 역시 browser로 고정되어 있었습니다. 따라서 이당시에서는 하나의 (js)파일로 모든 기능을 제공하거나, &lt;script&gt;태그의 순차 로딩과, window(global)객체를 활용하여 모듈을 흉내(IIFE의 module pattern)내거나 기능을 분리하여 제공하였습니다.javascript생태계가 발전함에 따라서, Javascript을 범용적으로 사용하려는 요구사항들이 발생하게 되었고, 이런 요구사항에 따라서 javascript에서의 module 기능의 필요성이 대두되게 되었습니다. 이러한 필요성에 의해서 탄생한 것이 javascipt module 시스템의, 양대산맥격인 cjs, amd이며 이어서, umd, ems등으로 발전하고 있습니다.전통적인 방법script order을 사용한 형태&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;body&gt;    &lt;script type="text/javascript" src="./area.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript" src="./main.js"&gt;&lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;// area.jsvar pi = 3.142;function area(radius) {  return pi * radius * radius;}// main.jsvar answer = area(5);console.log(answer);  global scope을 점유하고 있고, 너무 generic한 이름을 사용하고 있다.  pi나 area가 언제든 변경될 여지가 존재한다.IIFE module pattern형태// IIFE 1// area.jsvar utils = (function() {  // you hide `pi` within the function scope  var pi = 3.142;  function area(radius) {    return pi * radius * radius;  }  return { area };})();// main.jsvar answer = utils.area(5);// IIFE 2, 혹은 약속된 namespace을 활용// namespace.js// main.js, area.js가 약속하는 특정 namespace필요var myNamespace = {};// area.js(function(myNamespace) {  // you hide `pi` within the function scope  var pi = 3.142;  function area(radius) {    return pi * radius * radius;  }  myNamespace.area = area;})(myNamespace);// main.jsvar answer = myNamespace.area(5);  IIFE의 1번째 방법은 여전히 IIFE의 리턴을 받는 utils에 종속적이다. (다만 area라는 이름의 충돌은 피할 수 있다)  IIFE의 2번째 예제와 같은 형태가 jQuery의 방식이다. global에  $ 라는 namespace, 즉 특정 이름으로 노출하는 형태이다.  여전히 다음과 같은 문제가 존재한다          global namespace(scope) 오염      lack of dependency resolution (파일 순서가 매우 종속적임)      CommonJS (CJS)CommonJS는 브라우저 이외의 환경에서 범용적으로 javascript을 사용하게 하자는 목표를 가진 표준화 단체 이다. CommonJS는 모질라의 엔지니어 Kevin Dangoor에 의해 2009년 1월 시작되었으며 처음 이름은 ServerJS 였습니다. Kevin은 JavaScript가 브라우저용 언어를 넘어 범용적으로 쓰이려면, Ruby나 Python과 같은 체계가 필요하다고 주장 하였습니다.  CommonJS는 javascript library가 아니고, ECMA, W3C와 같은 표준(Spec)지정단체 입니다.  CommonJS는 결국 일종의 Spec 입니다.  CommonJS가 해결하고자 한 핵심 문제          서로 호환되는 표준 라이브러리가 없다.      데이터베이스에 연결할 수 있는 표준 인터페이스가 없다.      다른 모듈을 삽입하는 표준적인 방법이 없다.      코드를 패키징해서 배포하고 설치하는 방법이 필요하다.      의존성 문제까지 해결하는 공통 패키지 모듈 저장소가 필요하다.        CommonJS핵심 문제 해결법은 결국 ‘모듈화’          스코프(Scope): 모든 모듈은 자신만의 독립적인 실행 영역이 있어야 한다.      정의(Definition): 모듈 정의는 exports 객체를 이용한다.      사용(Usage): 모듈 사용은 require 함수를 이용한다.      Code// a.jsvar a = 3, b=4;// sum 모듈정의, 다른데서 사용 가능exports.sum = function(c, d) {  return a + b + c + d;};// b.jsvar a = 5, b = 6;var moduleA = require("./a.js"); // 모듈 사용moduleA.sum(a, b); // 3+4+5+6 = 18  CommonJS의 모듈 명세는 모든 파일이 로컬 디스크에 있어 필요할 때 바로 불러올 수 있는 상황을 전제(즉 ServerSide)을 전제합니다.  동기화가 기본이라 브라우저에서 사용시 성능 문제가 있습니다. → 이를위해서 동적 &lt;script&gt; 태그 삽입등이 추가되었습니다.  JavaScript가 브라우저에서 동작할 때는 서버 사이드 JavaScript와 달리 파일 단위의 스코프가 없습니다.          동적 &lt;script&gt;로 로딩시, 전통적인 방법과 동일하게, a.js와 b.js를 차례대로 로드하면, a.js의 변수가 b.js의 변수를 모두 덮어쓰게 되는 전역변수 문제도 발생합니다.      이런 문제를 해결하기 위해서, CommonJS는 서버 모듈을 비동기적으로 클라이언트에 전송할 수 있는 모듈 전송 포맷(module transport format)을 추가로 정의했습니다.          // complex-numbers/plus-two.js  require.define({"complex-numbers/plus-two": function(require, exports) {      //콜백 함수 안에 모듈을 정의한다.      var sum = require("./complex-number").sum;      exports.plusTwo = function(a){          return sum(a, 2);      };  },["complex-numbers/math"]); //먼저 로드되어야 할 모듈을 기술한다.      구현체대표적으로 node.js 와  FINF가 있습니다.  브라우저용          curl.js(http://github.com/unscriptable/curl)      SproutCore(http://sproutcore.com)      PINF(http://github.com/pinf/loader-js)      기타 등등        서버사이드용          Node.js(http://nodejs.org)      Narwhal(https://github.com/tlrobinson/narwhal)      Persevere(http://www.persvr.org)      Wakanda(http://www.wakandasoft.com)      참고: node.js의 경우, v12부터는 esm와 cjs을 모두 지원합니다, 2021년 6월 기준 16.0.3 에서 둘다 지원 가능(https://nodejs.org/api/modules.html, https://nodejs.org/api/esm.html)Asynchronous module definition (AMD)AMD그룹은 CommonJS에서 독립한(갈라져나온) 그룹입니다. AMD는 네트웍을 통해 비동기형태로 파일을 내려받는 환경(브라우저환경)에서의 모듈화에 중접을 두고 있습니다. 이는 CommonJS 추구하는 브라우저 이외의 환경을 목표로 하는 부분과 중점요소가 달랐기 때문에 CommonJS에서 합의점을 도출하지 못하고 갈라져 나오게 되었습니다.CJS, AMD을 가지고 무었이 더 좋다고 이야기 하기 힘듭니다. 둘다 서버환경, 브라우저 환경에서 구동 가능합니다. 다만 중점 요소가 명확하기 때문에 Server(node)에서는 CJS가 좀더 적합하고, FE(Browser)환경에서는 AMD가 좀더 적합합니다.Code모듈 정의// specdefine(id?, dependencies?, factory);/* js/a.js */// 모듈 정의의 기본 형태define([ // 의존 모듈들을 나열한다. 모듈이 한 개라도 배열로 넘겨야 한다.    'js/util',    'js/Ajax',    'js/Event'], function (util, Ajax, Event) { // 의존 모듈들은 순서대로 매개변수에 담긴다.    // 의존 모듈들이 모두 로딩 완료되면 이 함수를 실행한다.    // 초기화 영역    var callCount = 0;    function sum(a, b) {        callCount += 1;        return a + b;    }    function getCallCount() {      return i;    }    // 외부에 노출할 함수들만 반환한다.    return {        sum: sum,        getCallCount: getCallCount    };});// AMD 명세에서 정의하는 전역변수는 define과// CommonJS에서 사용하는 require 객체, exports 객체가 있다.// 그리고 전역 모듈을 명시적으로 가리킬 때 사용하는 define.amd 프로퍼티도 사용할 수 있다모듈사용/* js/main.js */require([    'js/a'], function (a) {    console.log(a.sum(1,2)); // 3    console.log(a.getCallCount()); // 1});부가설명  dependency(의존모듈)의 로딩 순서는 보장되지 않는다. (비동기로 받음)          dependency의 로딩 순서가 중요하다면 아래와 같이 중첩 require을 사용해야 한다.          require(['js/a'], function (a) {      require(['js/b'], function (b) {          // a -&gt; b 로딩 순서 보장      });  });        define구문에 dependency는 한번만 로딩된다. (다른 어디선가 동일한 모듈 로딩시 바로 로딩됨)구현체대표적으로 Dojo1.7 나 EmberJS등의 framework에서 AMD형태의 loader을 제공합니다. requirejs는 가장 대표적인 amd module loader입니다.  브라우저용          RequireJS(http://requirejs.org)      curl.js(http://github.com/unscriptable/curl)      bdLoad(http://bdframework.org/bdLoad/)      Yabble(http://github.com/jbrantly/yabble)      PINF(http://github.com/pinf/loader-js)      기타 등등        서버사이드용          RequireJS(http://requirejs.org)      PINF(http://github.com/pinf/loader-js)      Universal Module Definition (UMD)UMD는 CommonJS, AMD와 같이 javascript의 module에 대한 spec이 나누어져 있어서 나온 불편함을 한방에 해결하기 위해 나온 개념 입니다. CommonJS와 AMD와는 달리 spec은 아니고, CommonJS, AMD, 그리고 전통적인 방법(window 객체에 bind)을 모두 지원하는 형태(일종의 구현 패턴, 디자인패턴)으로 되어 있습니다.Code(function (global, factory) {    if (typeof define === 'function' &amp;&amp; define.amd) { // ADM        define(['jquery'], factory);    } else if (typeof module === 'object' &amp;&amp; module.exports) { // CommonJS        // Node/CommonJS        module.exports = function( root, jQuery ) {            if ( jQuery === undefined ) {                if ( typeof window !== 'undefined' ) {                    jQuery = require('jquery');                }                else {                    jQuery = require('jquery')(root);                }            }            factory(jQuery);            return jQuery;        };    } else { // window(Browser globals)        global.$ = factory(jQuery);    }}(window, function ($) {    $.fn.jqueryPlugin = function () { return true; };}));  UMD형태를 제공하는 전형적인 패턴입니다.          참고: https://github.com/umdjs/umd/blob/master/templates        UMD에서는, AMD는 define을 사용하고, CommonJS는 module.exports를 사용하는 차이점을 응용하여 모듈을 정의해줍니다. 둘다 아닌경우 전통적인 방식으로 global에 bind해줍니다.부가설명  umd는 현재 사용하는 javascript module 형태와 무관하게 어디서든 사용 가능한 구조로 되어 있습니다.  보통 webpack와 같은 bundler사용시에는 직접 구현할 필요없이 해당 형태로 만들어 줍니다.          참고: https://webpack.js.org/configuration/output/#outputglobalobject      ECMAScript Module (ESM)ESM은 ECMAScript에서 지원하는 자바스크립트 공식 모듈 시스템입니다. es6 부터 추가되었으며, 현재 IE을 제외한, 대다수의 브라우저에서 지원 가능합니다. es6문법 이전의 브라우저에서는 당연 미지원하기 때문에 구 브라우저 지원이 필요한 경우 bundler을 통해서 umd나 cjs, amd등으로 변환하여 지원하여야 합니다.  browser support: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#browser_support동작  참고: https://ui.toast.com/weekly-pick/ko_20180402  Browser기준 → 구성, 인스턴스화, 평가 → 모듈 인스턴스가 나옴          구성 - 모든 파일을 찾아 다운로드하고 모듈 레코드로 구문분석한다.      인스턴스 화 - export 된 값을 모두 배치하기 위해 메모리에 있는 공간들을 찾는다(아직 실제 값은 채우지 않음). 그다음 export와 import들이 이런 메모리 공간들을 가리키도록 한다. 이를 연결(linking) 이라고 한다.      평가 - 코드를 실행하여 상자의 값을 변수의 실제 값으로 채운다.      구성  모듈이 들어있는 파일을 어디서 다운로드 할 것인지 확인한다(module resolution이라고도 함).          파일의 진입점                  브라우저의 경우 script태그의 type=”module” 로 구분          Node의 경우 script태그가 없기 때문에, .mjs 확장자 사용 (아직 논의중!!!)                      파일을 가져온다(URL을 통해 다운로드 하거나 파일 시스템에서 불러옴).          실제 파일을 불러오는 것은 로더(loader)가 하며, 브라우저에서는 ES 모듈 명세가 아닌 HTML 명세를 따른다.                              ES 모듈 명세는 모듈 레코드에 파일을 구문분석하는 방법과 인스턴스 화 하는 방법, 그리고 그 모듈을 평가하는 방법을 알려준다. 하지만 파일을 처음에 어떻게 얻는지는 말하고 있지 않다.            파일을 불러오는 것은 로더(loader)이다. 로더는 다른 명세로 구성되어있다. 브라우저의 경우 HTML 명세를 따른다. 그러나 사용 중인 플랫폼에 따라 다른 로더를 가질 수 있다.                                파일을 모듈 레코드로 구문분석한다.          파일 진입점에서 파일을 받고, 모듈 레코드(Module Record)라고 하는 데이터 구조로 변환해야한다. 이 과정에서 해당 파일들의 모든 구문을 분석할 필요가 있다.      인스턴스화  인스턴스는 코드와 상태를 결합한다. 상태는 메모리에 있으므로 인스턴스 화 단계는 모든 것을 메모리에 연결(linking)하는 것이다.  모듈 그래프를 인스턴스 화하기 위해 엔진은 깊이 우선 순회를 수행  export의 값을 배치하기 위한 메모리 공간을 찾고 이를 가리키게 한다.          한 모듈에 대한 export와 import는 같은 메모리의 주소를 가리키게 한다.        실제 값은 채우지 않는다. 실제 값은 평가 단계에서 채워진다.평가  JS 엔진은 함수 외부 코드인 최상위 레벨 코드를 실행하여 값을 채운다.  모듈은 한 번만 평가하도록 한다.  인스턴스 화와 마찬가지로 깊이 우선 탐색 순회을 한다.  모듈 맵은 표준 URL로 모듈을 캐시 하므로 각 모듈에 대해 하나의 모듈 레코드만 있다.codeexport(named)export const a = 1export function fn(){}export class Class{}const b = 1function fn2(){}class Class2{}export { b, fn2, Class2 }  export구문을 여러개 사용가능합니다.  변수, 함수, 클래스, 객체 모두 export가능합니다.export default// 변수값은 default로 선언, 내보내기가 동시에 되지 않는다export default const a = 1 // 안되요~!!// fn.jsexport default function fn(){}// Class.jsexport default class Class{}//a.jsconst a = 1export default a// fn.jsfunction fn(){}export default fn// Class.jsclass Class{}export default Class  변수를 제외하고, 선언과 동시에 export가 가능합니다.  선언과, export을 구분해서는 모두 가능합니다.  export default는 모듈당 한번만 가능합니다. (보통 파일에서 한번만 가능)  export default와 그냥 일반 export을 섞어서 사용 가능합니다.import(named export을 import)import { a } from 'a.js'import { fn } from 'fn.js'import { Class } from 'class.js'import(export default을 import)import a from 'a.js'import fn from 'fn.js'import Class from 'class.js'import Change from 'class.js' //default의 경우 import된 모듈 이름 변경 가능합니다.import { a }, Class from 'some.js' // default export와 export을 둘다 import 가능합니다.  그외 여러 esm형태의 import, export는 아래 링크  참고          https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Modules      https://github.com/mdn/js-examples/tree/master/modules      Entry&lt;script type="module" src="main.js"&gt;&lt;/script&gt;  type=”module” 을 명시하면, main.js가 esm형태의 모듈을 따름을 브라우저에 알릴 수 있다.부가설명  node에서도 공식적으로 esm을 지원합니다.(현재 ems와 cjs을 모두 지원합니다)  es module(esm)의 동작 방식 아래 참고에 설명 꼭 읽으면 좋습니다.          참고: https://ui.toast.com/weekly-pick/ko_20180402            script tag동작      참고CJS  http://www.commonjs.org/  https://ko.wikipedia.org/wiki/CommonJS  https://www.blueskyonmars.com/2009/01/29/what-server-side-javascript-needs/  https://groups.google.com/g/commonjs?pli=1  https://d2.naver.com/helloworld/12864  http://wiki.commonjs.org/wiki/Modules/TransportAMD  https://www.oreilly.com/library/view/learning-javascript-design/9781449334840/ch11s02.html  https://d2.naver.com/helloworld/591319  https://requirejs.org/docs/whyamd.html  https://github.com/amdjs/amdjs-api/wiki/AMD  https://github.com/amdjs/amdjs-api/blob/master/AMD.md  https://en.wikipedia.org/wiki/Asynchronous_module_definition  https://www.slideshare.net/xMartin12/asynchronous-module-definition-amdUMD  https://github.com/umdjs/umd  https://sub0709.tistory.com/49  https://www.zerocho.com/category/JavaScript/post/5b67e7847bbbd3001b43fd73ESM  https://yoeubi28.medium.com/commonjs-esm-모듈-순환-참조-차이-e5cd1047deaf  https://v8.dev/features/modules#mjs  https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/  https://ui.toast.com/weekly-pick/ko_20180402  https://velog.io/@jjunyjjuny/ES-Modules-정리하기  https://yceffort.kr/2020/08/commonjs-esmodules  https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Modules  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export  https://tc39.es/ecma262/#sec-modulesETC  https://medium.com/sungthecoder/javascript-module-module-loader-module-bundler-es6-module-confused-yet-6343510e7bde  https://lihautan.com/javascript-modules/  https://beomy.github.io/tech/javascript/cjs-amd-umd-esm/#:~:text=ESM은 ECMAScript에서 지원,들러를 함께 사용해야 합니다  https://thebook.io/080203/ch22/04/  https://defineall.tistory.com/916]]></content>
      <categories>
        
          <category> tech talk </category>
        
      </categories>
      <tags>
        
          <tag> javascript </tag>
        
          <tag> cjs </tag>
        
          <tag> amd </tag>
        
          <tag> umd </tag>
        
          <tag> esm </tag>
        
          <tag> tech basic </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[pm2 logroate 가 pm2 멀티 인스턴스에서 이상동작]]></title>
      <url>/articles/2021-06/pm2-logroate-not-working</url>
      <content type="text"><![CDATA[pm2 logroate 가 pm2 멀티 인스턴스에서 이상동작문제점  pm2의 2.7.0 버전에서, multiple instance사용시, 첫번째 instance만 roate되는 문제          위 그림을 보면 app-out-1.log, app-out-2.log, app-out-3.log, app-out-4.log로 4개의 로그가 instance마다 각각 생성되는데, logroate는 app-out-1.log (첫번째 instance의 log)만 되는 문제가 있음을 알 수 있다.        이미 공식 이슈로 이슈업 되어 있다.          관련이슈: https://github.com/keymetrics/pm2-logrotate/issues/143        해결 방법 요약    A. pm2을 일시적으로 downgrade(2.7.0 -&gt; 2.6.0) 하면 정상 동작한다.B. pm2는 multiple instance로 사용해도, log는 하나로 쌓게 한다.      위 두가지 방법중 하나를 사용하여 해결 가능하다.pm2에서 multiple instance를 사용해도 Log는 하나로 합치기  pm2.config.js 파일에 아래와 같이 merge_logs: true,을 추가한다.module.exports = {  apps: [    {      name: 'app',      script: './dist/index.js',      instances: 4,      merge_logs: true,  // !!!! 이렇게 추가!!!      exec_mode: 'cluster',      wait_ready: true,      listen_timeout: 60000,      max_memory_restart: '1024M',      kill_timeout: 5000,    },  ],};pm2-logroate conf설정 방법  추가로 아래와 같이, pm2-logroate 설정도 가능하다.$ pm2 set pm2-logrotate:compress true$ pm2 set pm2-logrotate:retain 5$ pm2 set pm2-logrotate:rotateInterval 0 0 * * *$ pm2 set pm2-logrotate:max_size 500M$ pm2 set pm2-logrotate:rotateModule true$ pm2 set pm2-logrotate:dateFormat YYYY-MM-DD_HH-mm-ss$ pm2 set pm2-logrotate:workerInterval 30  pm2-logrotate:compress, logroate된 파일을 압축(gzip) 한다.  pm2-logrotate:retain, rotation된 파일은 5개만 유지한다. (즉 5일치만 유지)  pm2-logrotate:rotateInterval 0 0 * * *, -&gt; 매일 0 시 0분에 한번 cronjob 형태 (결국 매일 1번!!!) 로 roatation을 발생한다          이는 cronjob의 설정와 동일하다        pm2-logrotate:max_size 500M, Max 500M까지만 log파일을 유지한다.  pm2-logrotate:dateFormat YYYY-MM-DD_HH-mm-ss, logroate하는 파일의 파일명의 prefix의 dateFormat설정  pm2-logrotate:workerInterval 30, logroate하는 checke주기로, 위 max-size에 대한 체크를 한다. 단위는 sec(초)이다. 즉 30이면 30초]]></content>
      <categories>
        
          <category> troubleshooting </category>
        
      </categories>
      <tags>
        
          <tag> pm2 </tag>
        
          <tag> devops </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[SSL, Https 설정 in Node.js And webpack dev server]]></title>
      <url>/articles/2021-02/SSL,-Https-setting-in-Node-js-And-webpack-dev-server</url>
      <content type="text"><![CDATA[소개  Node.js 환경에서 https설정하는 방법을 설명한다.  현재 my.example.com은 이미 cert, key 가 존재한다.  다만 해당 파일이 pem파일로 되어있고, 현재는 nginx의 https의 설정용으로 되어 있다.          또한 현재 nginx용 ssl은 pass을 받게 되어 있다.        따라서, node에서 해당 ssl(cert, key)을 바로 사용하는 경우 에러가 발생한다.  현재 이미 있는 nginx용 ssl을 node.js(webpack-dev-server)에서 사용하는 방법을 설명한다.Node.js 에서 https설정하기  정상적인 ssl(cert, key)가 존재하는 경우 아래와 같은 코드로 https설정이 가능하다.  공식Doc - https://nodejs.org/api/https.html// curl -k https://localhost:8000/const https = require('https');const fs = require('fs');const options = {  key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),  cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem')};https.createServer(options, (req, res) =&gt; {  res.writeHead(200);  res.end('hello world\n');}).listen(8000);// 또는const https = require('https');const fs = require('fs');const options = {  pfx: fs.readFileSync('test/fixtures/test_cert.pfx'),  passphrase: 'sample'};https.createServer(options, (req, res) =&gt; {  res.writeHead(200);  res.end('hello world\n');}).listen(8000);Node의 공식 문서에서 알 수 있는 사실  확장자가 pem, key, pfx, cert을 다 지원 가능  ca을 넣지 않아도 무방  pass을 넣는 부분은 없음Express에서 https설정하기  가장 기본이 되는 Node의 설정과 거의 동일하다.  webpack-dev-server는 내부적으로 express.js을 사용하고 있기 때문에, express.js에서 정상 동작하면 사실상 webpack-dev-server에서 정상 동작한다.  이게 되면 사실상 거의 비슷한 구조인 koa2.js역시 동일한 형태로 https설정이 가능하다.const express = require('express');const https = require('https');const fs = require('fs');const app = express();// 더미 라우트 모든 req에 대해서 result을 resapp.use((req, res, next) =&gt; {  return res.status(200).json('result');});const PORT = process.env.PORT || 4431;   // HTTPS 는 443 포트를 사용합니다const options = {  key: fs.readFileSync(__dirname + '/key.pem'),  cert: fs.readFileSync(__dirname + '/cert.pem'),};// https 서버를 만들고 실행시킵니다https.createServer(options, app).listen(PORT, () =&gt; {  console.log('Server start!!!');});// 또는 아래와 같이 https와 http둘다 지원되는 서버 구축 가능const express = require('express');const https = require('https');const http = require('http');const fs = require('fs');const options = {  key: fs.readFileSync('key.pem'),  cert: fs.readFileSync('cert.cert'), // pem이건 cert이건 확장과 관계없음, 이는 base인 node.js가 지원해서 가능};// Create a service (the app object is just a callback).const app = express();// Create an HTTP service.http.createServer(app).listen(80);// Create an HTTPS service identical to the HTTP service.https.createServer(options, app).listen(443);webpack-dev-server의 https설정  참고: https://webpack.js.org/configuration/dev-server/#devserverhttpsmodule.exports = {  //...  devServer: {    https: {      key: fs.readFileSync('/path/to/server.key'),      cert: fs.readFileSync('/path/to/server.crt'),      ca: fs.readFileSync('/path/to/ca.pem'),    },  },};  문서상, webpack devServer설정상의 https object설정이 그대로, 더 위에서 설명한, node 혹은 express설정의 https생성(createServer) optioins로 들어간다.  This object is passed straight to Node.js HTTPS module, so see the HTTPS documentation for more information.ssl키 local에서 생성해보기  참고: https://gist.github.com/gseok/cbc326896d9cc4d240201e3f59690ac9pre-required  openssl 이 있어야 한다.ssl.conf  cert파일 생성시 사용되는, ssl 설정 파일[ req ]default_bits       = 4096distinguished_name = req_distinguished_namereq_extensions     = req_ext[ req_distinguished_name ]countryName                 = ILcountryName_default         = GBstateOrProvinceName         = CenterstateOrProvinceName_default = EnglandlocalityName                = Tel AvivlocalityName_default        = BrightonorganizationName            = CAorganizationName_default    = HallmarkdesignorganizationalUnitName      = BlazeMetercommonName                  = localhostcommonName_max              = 64commonName_default          = localhost[ req_ext ]subjectAltName = @alt_names[alt_names]DNS.1   = localhostGenerate private key  비공개키 생성$ openssl genrsa -out private.key 4096Generate a Certificate Signing Request  비공개키와, ssl.conf(ssl 설정 파일)을 이용해서, sign파일(csr) 생성openssl req -new -sha256 \    -out private.csr \    -key private.key \    -config ssl.confGenerate the certificate  비공개키 + 키 sign 파일 두개를 이용해서, cert 파일 생성(실질적인 인증서 파일!)  이때도 ssl.conf는 동일하게 사용됨openssl x509 -req \    -days 3650 \    -in private.csr \    -signkey private.key \    -out private.crt \    -extensions req_ext \    -extfile ssl.confAdd the certificate to keychain and trust it:  local에서 생성한 ssl용 cert파일은, 공식 인증기관에서 인증한 키가 아니기 때문에 실제 사용시 브라우저에서, ```알수없는 인증기관``에서 인증 과련 경고가 발생  아래 로직은 임의로, 본인 컴퓨터에서 해당 key을 믿을만한키로 인식 하는 방법(개발용) 이다.sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain private.crtCreate a pem file from crt  위 과정상으로 확장자가 crt인 인증서파일을 생성하였는데, 이 확장자를 openssl명령어로 벼경 가능하다.  쉽게 이해하자면, 특정 유틸프로그램(openssl)로 jpg &gt; png하는것과 비슷하다.          즉 실질적인 기능은 동일한데, 확장자(내부 format)이 다른 type형태로 전환 가능      openssl x509 -in private.crt -out private.pem -outform PEMRun webpack dev server  로컬에서 생성한 ssl (key and cert)을 가지고 webpack-dev-server or node.js 에서 https로 사용 가능하다.npm run webpack-dev-server -- --open --https --cert private.pem --key private.keyssl키 type 혹은 확장자 변경  위 간략한 ssl키 local에서 생성 과정에서 알수 있듯, openssl로 ssl이 생성한 파일의 type(pem, key, crt 등)을 변경하거나, pem 에서 key을 추출하는등의 동작이 가능하다.  참고: https://stackoverflow.com/questions/13732826/convert-pem-to-crt-and-key  참고: https://stackoverflow.com/questions/991758/how-to-get-pem-file-from-key-and-crt-files  여기서는 몇가지 방법반 소개한다. 더 많은 방법은 위 참고 부분을 확인pem 파일에서 key &amp; cert추출  즉 key.pem -&gt; key.keyopenssl pkey -in ./cert/key.pem -out key.key// 위 명령어 시도시, Enter pass phrase 요청이 나옴 이때, nginx에서 쓰는 ssl.pass 파일에 기록된 값을 사용  또는openssl rsa -in foo.pem -out foo.keyConvert a DER file (.crt .cer .der) to PEMopenssl x509 -inform der -in certificate.cer -out certificate.pemConvert a PEM file to DERopenssl x509 -outform der -in certificate.pem -out certificate.derConvert PEM to CRT (.CRT file)openssl x509 -outform der -in certificate.pem -out certificate.crtConvert PEM to PFXopenssl pkcs12 -export -out certificate.pfx -inkey privateKey.key -in certificate.crt -certfile CACert.crtTo remove the pass phrase on an RSA private key openssl rsa -in key.pem -out keyout.pem  pem 파일에서 key &amp; cert추출 와 동일  설명상 실질적으로는 pem에서 pass phrase을 제거(혹은 추가?) 하는 역할이미 있는 nginx용 ssl을 node.js(webpack-dev-server)에서 사용하는 방법  사실상 위의 openssl을 사용하여, pem -&gt; key 추출 등의 여러 명령어를 사용하여, node에서 사용가능하게 변경하면 된다.          각 nginx ssl환경에 맞는 파일을 -&gt; node 환경에서 사용가능하게 변경 후 사용하면됨…        여기서는 my.example.com에서 사용하는 nginx용 인증서를 node용으로 바꾸는 부분만 간략하게 다룬다nginx인증서  cert.pem, key.pem, ssl.pass 3개의 파일로 구성되어 있음          주의!! - nginx하위에 현재 설정된, ssl.conf는 nginx용 conf이지 openssl에서 key, cert을 생성하기위한 conf가 아님!!!        일단 cert와, key가 pem으로 되어 있고, pass(passwd)사용하는걸 알 수 있다.  node에서 사용하려면          A. pfx 형태로 바꾸고 node 쪽의 https설정(createServer)에서 pass을 넘겨주는 형태      B. key.pem에서 pass을 추출(혹은 합산)해서 key을 생성하고 사용하는 형태        위와같이 2개의 방법을 사용 할 수 있다.          A.의 경우 CA인증서가 필요하고, cert.pem에서 crt파일로 변경이 필요함      B.의 경우, key.pem -&gt; key.key 형태로 변경 후 사용 가능.      실제 적용  실제 서버의 webpack-dev-server에서는 B 형태로 작업하였다.  pem -&gt; key 변경(pass추출or합산)openssl pkey -in ./cert/key.pem -out key.key  cert는 기존꺼 그대로 사용해도 됨(pem이여도됨)const express = require('express');const https = require('https');const fs = require('fs');const app = express();app.use((req, res, next) =&gt; {  return res.status(200).json('result');});const PORT = process.env.PORT || 4431;   // HTTPS 는 443 포트를 사용합니다const options = {   // pem -&gt; key 확장자 만드는 위 명령어로 생성한놈, 생성시 pass잘 넣어야 정상 생서욈  key: fs.readFileSync(__dirname + '/key.key'),  // cert는 기존 pem그대로 사용 가능  cert: fs.readFileSync(__dirname + '/cert/cert.pem'),};// https 서버를 만들고 실행시킵니다https.createServer(options, app).listen(PORT, () =&gt; {  console.log('Server start!!!');});  서버 구동됨  접속시 정상 동작  webpack-dev-serverdevServer: {        public: 'local-my.example.com:3132',        https: {          key: fs.readFileSync(`${__dirname}/../../nginx-conf/certificate/key.key`),          cert: fs.readFileSync(`${__dirname}/../../nginx-conf/certificate/cert.pem`),        },        publicPath: '/',        port: 3132,        hot: true,        open: true,        inline: true,        writeToDisk: true,        disableHostCheck: true,        historyApiFallback: true,        compress: true,      },추가 내용  webpack-dev-server의 https 설정은, 그 설정 그대로 node의 설정에 들어간다고 생각해도 된다.  node 에서 passphrase: 'sample'와 같이 비번(passphrase)을 직접 입력하면, 굳이 pem 으로 (pass추출or합산) 하지 않아도 동작 가능하다.  다만 이 글에서는 코드내에 passwd 노출이 싫었고, 각 파일들 pem, crt, key을 추출 합산 하는게 가능하다는걸 소개하고 싶었다. 각 개발 환경에 맞게 응용해서 쓰면 될꺼 같다.좀더알기  SSL?          https://wiki.kldp.org/HOWTO/html/SSL-Certificates-HOWTO/x70.html      https://offbyone.tistory.com/274        ssl 파일 포멧?          https://www.sslcert.co.kr/guides/kb/54      https://www.letmecompile.com/certificate-file-format-extensions-comparison/      ]]></content>
      <categories>
        
          <category> bundler </category>
        
      </categories>
      <tags>
        
          <tag> nodejs </tag>
        
          <tag> webpack </tag>
        
          <tag> devops </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Node Env?]]></title>
      <url>/articles/2020-03/Node-Env</url>
      <content type="text"><![CDATA[소개node application에서 흔하게 사용하는 enviroment 변수의 사용에 대해서 간략히 알아봅니다.enviroment 개념어떤 process환경에서 접근 가능한 변수(key-value)를 의미 합니다. unix 환경을 사용하고 있다면 간단히 다음 명령어로 현재 shell의 환경 변수를 알 수 있습니다.$ printenvwindow의 환경에서 JAVA_HOME등을 위해서 설정하는 환경변수등이 이러 변수의 대표적인 예 입니다.주의해야 할 부분은 환경변수가 ‘어떤 process환경’ 에서 접근 가능한 변수라는 부분 입니다. 위의 printenv로 확인 가능한 환경변수는 해당 shell(terminal) process 환경에서 접근 가능한 환경 변수를 보여줍니다.만약 사용자가 어떤 ‘node application’을 구동한 경우, node 프로그램상에서 process.env[key] 로 접근하는 환경변수는, 해당 node process 환경에서 접근 가능한 변수 입니다.이는 해당 node 프로그램을 구동하게되는 부모 process(만약 어떤 shell에서 수행했다면)와 항상 동일한게 아니라 각기 독립적일수 있다는 사실을 명심해야 합니다.해당 부분은 node 에서 child process을 fork하는 command의 api document을 보면 더 쉽게 이해 가능합니다. 참고: https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callbackwebpack env와 혼동하지 말기webpack을 이용한 bundle환경을 구축하였을때, 특히 server을 node로 구성하는경우, 위의 기본 개념을 정확하게 이해하지 못해서 환경변수 설정에 대한 실수를 할 가능성이 많습니다.webpack역시 node에서 구동되는 node application 이기 때문에 더욱 그러한 경우가 많이 있습니다.webpack에서 webpack command을 수행할때, cli환경에서 webpack에 env을 지정 or 넘겨줄 수 있습니다.$ webpack --config webpack.config.js --env.MY_ENV=test --env.MULTI=test_multi이 경우 env 값에 MY_ENV와 MULTI가 존재하지만 이는 webpack process환경 내에서만 유의미합니다.해당 빌드의 결과물로 server.js가 생성되었다고 가정하였을때, node server.js을 하여도, 위 환경변수는 존재하지 않습니다. 왜냐하면, node server.js는 새로운 node process이고, 이 node process을 수행하때, 동일한 환경변수를 지정하지 않았기 때문입니다.따라서 해당형태로 구동하고 싶다면, 아래와 같이 새로운 node process 구동시에도 환경변수를 지정해 주어야 합니다.$ MY_ENV=test MULTI=test_multi node server.js결국 기본 개념과 동일한 이야기 인데, 핵심은 어떤 process의 환경변수를 맞추어 주려면 해당 process수행와 동시에 환경변수를 지정해 주어야 합니다.Cross Platform환경에서의 enviroments개발자 개발환경 및 제품(project)의 실행환경이 동일하면 큰 문제가 없지만 만약 window, mac, linux등 서로 다른 환경을 가지고 있을 경우, 각각의 platform 별로 환경 변수를 설정하는 방법에 차이가 있어 문제가 발생 할 수 있습니다.따라서 이러한 cross platform 환경에서도 동일한 형태의 환경변수 사용을 위해서 node.js진영에서 많이 사용하는 환경 변수 설정 모듈(유틸)을 소개합니다.dotenv참고: https://github.com/motdotla/dotenv#readme프로젝트에 .env라는 숨김 파일이나 지정된 파일을, node application실행 전에 적용하여 environment을 설정하는 유틸성 모듈 입니다. node 명령어와 동시에 사용하는 방법도 가능하고, programmatically 하게 사용하는 방법도 가능합니다. 서로다른 platform 에서의 처리는 dotenv가 내부적을 알아서 처리해 줍니다.node와 같이 실행$ node -r dotenv/config your_script.js dotenv_config_path=/custom/path/to/.envprogrammatically 하게 실행require('dotenv').config({ path: '/custom/path/to/.env' })crossenv참고: https://github.com/kentcdodds/cross-env#readme서로 다른 platform와 무관하게, unix형태의 process수행시 env을 설정하는것과 동일한 형태로 env을 설정하면 해당 env을 process env로 설정해주는 유틸성 모듈 입니다.$ cross-env NODE_ENV=production webpack --config build/webpack.config.js실제 사용은 unix계열에서 사용하는것고 거의 동일하며, 앞에 cross-env 명령어를 추가해 주는 형태로 사용 가능합니다.]]></content>
      <categories>
        
          <category> tech talk </category>
        
      </categories>
      <tags>
        
          <tag> nodejs </tag>
        
          <tag> env </tag>
        
          <tag> webpack </tag>
        
          <tag> dotenv </tag>
        
          <tag> crossenv </tag>
        
          <tag> devops </tag>
        
          <tag> tech basic </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Git Hooks, GitHub Webhooks]]></title>
      <url>/articles/2020-03/Git-Hooks,-GitHub-Webhooks</url>
      <content type="text"><![CDATA[소개git hook 의 개념과 사용법에 대하여 소개합니다.Git HookGit도 다른 버전 관리 시스템처럼 어떤 이벤트가 생겼을 때 자동으로 특정 스크립트를 실행하도록 할 수 있습니다. Git 에서는 이를 hook 으로 제공하고 있습니다. 내부적으로 client hook과 server hook으로 구분됩니다.git hook 설치 및 사용git hook의 설치 위치는 기본적으로.git/hooks 입니다. 이 디렉토리에 가보면 Git이 자동으로 넣어준 매우 유용한 스크립트 sample이 몇 개 있습니다. 그리고 스크립트가 입력받는 값이 어떤 값인지 파일 안에 자세히 설명되어 있습니다.#!/bin/sh## An example hook script to verify what is about to be committed.# Called by "git commit" with no arguments.  The hook should# exit with non-zero status after issuing an appropriate message if# it wants to stop the commit.## To enable this hook, rename this file to "pre-commit".if git rev-parse --verify HEAD &gt;/dev/null 2&gt;&amp;1then        against=HEADelse        # Initial commit: diff against an empty tree object        against=$(git hash-object -t tree /dev/null)fi# If you want to allow non-ASCII filenames set this variable to true.allownonascii=$(git config --bool hooks.allownonascii)# Redirect output to stderr.exec 1&gt;&amp;2# Cross platform projects tend to avoid non-ASCII filenames; prevent# them from being added to the repository. We exploit the fact that the# printable range starts at the space character and ends with tilde.if [ "$allownonascii" != "true" ] &amp;&amp;        # Note that the use of brackets around a tr range is ok here, (it's        # even required, for portability to Solaris 10's /usr/bin/tr), since        # the square bracket bytes happen to fall in the designated range.        test $(git diff --cached --name-only --diff-filter=A -z $against |          LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0then        cat &lt;&lt;\EOFError: Attempt to add a non-ASCII file name.This can cause problems if you want to work with people on other platforms.To be portable it is advisable to rename the file.If you know what you are doing you can disable this check using:  git config hooks.allownonascii trueEOF        exit 1fi# If there are whitespace errors, print the offending file names and fail.exec git diff-index --check --cached $against --기본적으로 모든 예제는 Shell 또는 Perl 스크립트로 작성돼 있지만 실행할 수만 있으면 되고 node, ruby, python같은 익숙한 언어로 만들어도 됩니다.실행할 수 있는 스크립트 파일을 확장자 없이 저장소의 .git/hooks 디렉토리에 넣으면 훅 스크립트 활성화 됩니다.다음에서 대표적인 hook을 몇개 살펴보겠습니다.pre-commit  커밋할 때 가장 먼저 호출되는 훅으로 커밋 메시지를 작성하기 전에 호출 됩니다.  커밋할 때 꼭 확인해야 할 게 있으면 이 훅으로 확인합니다.  이 훅의 Exit 코드가 0이 아니면 커밋은 취소됩니다.  git commit –no-verify 사용시 이 훅은 무시됩니다.  lint 같은 프로그램으로 코드 스타일을 검사하거나, 라인 끝의 공백 문자를 검사하거나, 새로 추가한 코드에 주석을 달았는지 검사하는 등의 역할을 하기위한 훅 입니다.commit-msg  커밋 메시지가 들어 있는 임시 파일의 경로를 아규먼트로 받습니다.  이 훅의 Exit 코드가 0이 아니면 커밋은 취소됩니다.  훅에서 최종적으로 커밋이 완료되기 전에 프로젝트 상태나 커밋 메시지를 검증하는데 사용합니다.  커밋이 완료되면 이후 post-commit 훅이 실행됩니다.pre-push  git push 명령을 실행하면 동작하는데 리모트 정보를 업데이트 하고 난 후 리모트로 데이터를 전송하기 전에 동작 합니다.  이 훅의 Exit 코드가 0이 아니면 push은 취소됩니다.  보통 Push 하기 전에 커밋이 유효한지 확인하는 용도로 사용합니다.그외 hook에 대해서는 git 공식 문서를 참고하세요참고: git hookshuskygit hook 을 직접 구축 할 필요없이, 이미 존재하는 script나 command을 연동하여 git hook의 역할을 하도록 해주는 git hook 유틸 모듈입니다.여러 개발자가 공통의 git hook을 사용하려면, 동일하게 각 개발자 local 환경에서 .git/hooks 에 동일한 hook script을 구성하거나, global hooks디렉토리에 hook script을 구성하여야 하는 어려움이 있는데, husky을 사용시 husky가 각 개발자의 .git/hooks 에 script연동을 proxy해주기 때문에, 손쉽에 개발팀 공통의 git hook을 설정 할 수 있습니다.참고: huskyhusky 설정// package.json{  "husky": {    "hooks": {      "pre-commit": "npm test",      "pre-push": "npm test",      "...": "..."    }  }}git hook이 지원하는 hook 명령어를 key로 하여, 해당 hook이 동작할때 구동되어야 하는 명령어를 지정하는 형태로 설정하면 됩니다..huskyrc 파일을 사용하여서 husky 설정하는것도 가능합니다.husky가 설정된 상태에서 hook 확인  .git/hooks 폴더를 확인해보면, husky.sh와 husky.local.sh 파일이 있음을 알 수 있습니다.pre-commit#!/bin/sh# husky# Created by Husky v4.2.1 (https://github.com/typicode/husky#readme). "$(dirname "$0")/husky.sh"husky.shdebug () {  if [ "$HUSKY_DEBUG" = "true" ] || [ "$HUSKY_DEBUG" = "1" ]; then    echo "husky:debug $1"  fi}command_exists () {  command -v "$1" &gt;/dev/null 2&gt;&amp;1}run_command () {  if command_exists "$1"; then    "$@" husky-run $hookName "$gitParams"    exitCode="$?"    debug "$* husky-run exited with $exitCode exit code"    if [ $exitCode -eq 127 ]; then      echo "Can't find Husky, skipping $hookName hook"      echo "You can reinstall it using 'npm install husky --save-dev' or delete this hook"    else      exit $exitCode    fi  else    echo "Can't find $1 in PATH: $PATH"    echo "Skipping $hookName hook"    exit 0  fi}hookIsDefined () {  grep -qs $hookName \    package.json \    .huskyrc \    .huskyrc.json \    .huskyrc.yaml \    .huskyrc.yml \    .huskyrc.js \    husky.config.js}huskyVersion="4.2.1"gitParams="$*"hookName="$(basename "$0")"debug "husky v$huskyVersion - $hookName"# Skip if HUSKY_SKIP_HOOKS is setif [ "$HUSKY_SKIP_HOOKS" = "true" ] || [ "$HUSKY_SKIP_HOOKS" = "1" ]; then  debug "HUSKY_SKIP_HOOKS is set to $HUSKY_SKIP_HOOKS, skipping hook"  exit 0fi# Source user var and change directory. "$(dirname "$0")/husky.local.sh"debug "Current working directory is $(pwd)"# Skip fast if hookName is not definedif ! hookIsDefined; then  debug "$hookName config not found, skipping hook"  exit 0fi# Source user ~/.huskyrcif [ -f ~/.huskyrc ]; then  debug "source ~/.huskyrc"  . ~/.huskyrcfi# Set HUSKY_GIT_STDIN from stdincase $hookName in  "pre-push"|"pre-receive"|"post-receive"|"post-rewrite")    export HUSKY_GIT_STDIN="$(cat)";;esac# Windows 10, Git Bash and Yarn 1 installerif command_exists winpty &amp;&amp; test -t 1; then  exec &lt; /dev/ttyfi# Run husky-run with the package manager used to install Huskycase $packageManager in  "npm") run_command npx --no-install;;  "pnpm") run_command pnpx --no-install;;  "yarn") run_command yarn run --silent;;  "*") echo "Unknown package manager: $packageManager"; exit 0;;esacGitHub Webhookgit hook와 개념적으로 비슷하지만 Event발생 주체와 실제 사용 및 event발생 시점이 차이가 있습니다.git hook이 보통 local에서의 git command동작에 의해서 발생하는 형태이거나, git이 구축된 서버에서 발생해주는 형태라면, github webhook은 github을 사용할때, github의 동작(e.g. fork, pull request, milestone 등등)에 의해서 발생합니다.참고: github webhook해당 기능을 응용하여, pull request 발생시, telegram등의 대화방에 알리기 등의 동작 구현이 가능합니다.보통 github 자체의 setting page에 webhook발생시 호출할 url연동하게 되어 있습니다.]]></content>
      <categories>
        
          <category> version control </category>
        
      </categories>
      <tags>
        
          <tag> git </tag>
        
          <tag> github </tag>
        
          <tag> git hook </tag>
        
          <tag> webhook </tag>
        
          <tag> husky </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Javascript Logger]]></title>
      <url>/articles/2020-03/Javascript-Logger</url>
      <content type="text"><![CDATA[소개javascript의 logger의 개념과 사용을 간략하게 소개합니다.개념설명javascript 개발 환경에서 특히 client개발을 하는경우 console.log을 보통 사용하기 때문에, 다른 언어나 framework에서 사용하는 별도의 logger을 도입하는 경우가 많지는 않습니다. 하지만 node와 같은 서버에서는 logger를 도입해서 사용하는것이 좀더 효율적으로 server log을 관리 할 수 있다고 생각됩니다.logger을 도입하면 아래와 같은 이점이 있습니다.  Log을 Level별로 관리 할 수 있습니다.  Log을 file or stdout형태로 관리 할 수 있습니다.  Log format을 각 프로젝트에 맞게 custtomize할 수 있습니다.  Log을 빌드 시점 or Runtime에 on/off 할 수 있습니다.Log Level로그 레벨이 javascipt에서는 표준처럼 정해진 부분은 없습니다. 다만 unix system의 syslog의 RFC5424형태나 android, apach(log4j)등을 참고해 볼 수 있습니다.syslog (RFC5424)androidlog4j중요한 점은 Log을 Level로 구분하고, 의미를 부여하여서 관리 &amp; 적용한다는 부분입니다. 보통 Error, Debug, Warning, Info는 거의 비슷하게(비슷한 의미로) 존재합니다.winstonjava(apach)의 경우 log4j라는 유명한 logger라이브러리가 있습니다. javascript의 경우 javascript을 대표하는 logger라이브러리는 없지만, javascript진영에서 가장 많이 사용하는 (Top10)라이브러리중 하나인 winston을 소개합니다.참고: https://github.com/winstonjs/winstonwinston의 특징은 다음과 같습니다.  javascript logger.  log level 컨트롤이 가능합니다.          custom log level정의가 가능합니다.      log level에 따른 동적 처리가 가능합니다.        Transport기능을 제공합니다.          log을 file, db 등으로 출력하는게 가능합니다. 물론 stdout(console.log)도 가능합니다.      log의 출력을 level별로 조정 하는게 가능합니다.      참고: https://github.com/winstonjs/winston#transports        Format 기능을 제공합니다.          Custom한 format을 생성할 수 있습니다.      참고: https://github.com/winstonjs/logform        Profile 기능을 제공합니다.          간략한 수준 (수행시간 측정)에 활용 가능한 profile기능을 제공합니다.      참고: https://github.com/winstonjs/winston#profiling        Querying Logs 기능을 제공합니다.winston custom logger아래 코드 예제처럼 사용자 입맛에 맞는 형태로 logger구성을 하여 사용하는것이 가능합니다.      Code      import { Logger } from 'winston';  import * as winston from 'winston';  const { combine, timestamp, colorize, printf, json } = winston.format;  const customFormat: any = printf((info: any) =&gt; {    return `[${info.timestamp}][${info.level}] ${info.message}`;  });  // NOTE: Log only less than or equal to this level (log level)  // LOG_LEVEL is setting when webpack build time  const customLogger: Logger = winston.createLogger({    level: 'LOG_LEVEL',    levels: {      log: 0, // log always displayed      error: 1,      warn: 2,      info: 3,      debug: 4,    },    format: combine(      timestamp({        format: 'YYYY-MM-DD HH:mm:ss.SSS',      }),      colorize(),      json(),      customFormat,    ),    transports: [      new winston.transports.Console({        level: 'LOG_LEVEL',      }),    ],  });  winston.addColors({    log: 'grey',    error: 'red',    warn: 'yellow',    info: 'green',    debug: 'blue',  });  const formatObject: Function = (param: any): string =&gt; {    const type: any = typeof param;    if (type === 'object' || type === 'function') {      try {        return JSON.stringify(param, null, 2);      } catch (e) {        const cache: Set&lt;any&gt; = new Set();        return JSON.stringify(          param,          (key, value) =&gt; {            if (typeof value === 'object' &amp;&amp; value !== null) {              if (cache.has(value)) {                // Circular reference found                try {                  // If this value does not reference a parent it can be deduped                  return JSON.parse(JSON.stringify(value));                } catch (err) {                  // discard key if value cannot be deduped                  return '';                }              }              // Store value in our set              cache.add(value);            }            return value;          },          2,        );      }    }    return param;  };  const createLogContent: Function = (...args: any[]): string =&gt; {    let data = '';    if (args.length === 1) {      return args[0];    }    if (args.length &gt; 1) {      args.forEach((logData: any, index: number) =&gt; {        if (index === 0) {          data += formatObject(logData);          return;        }        data += `, ${formatObject(logData)}`;      });    }    return data;  };  // support multiple arguments e.g) logger.debug('arg1', 'arg2', 'arg3')  const logger: any = {    log: async (...args: any[]) =&gt; {      customLogger.log('log', createLogContent(...args));    },    error: async (...args: any[]) =&gt; {      customLogger.error(createLogContent(...args));      // TODO: implements sen nelo log    },    warn: async (...args: any[]) =&gt; {      customLogger.warn(createLogContent(...args));    },    info: async (...args: any[]) =&gt; {      customLogger.info(createLogContent(...args));    },    debug: async (...args: any[]) =&gt; {      customLogger.debug(createLogContent(...args));    },  };  if (process.env.NODE_ENV !== 'production') {    logger.debug('Logging initialized at debug level');  }  export default logger;      ]]></content>
      <categories>
        
          <category> tech talk </category>
        
      </categories>
      <tags>
        
          <tag> javascript </tag>
        
          <tag> logger </tag>
        
          <tag> log </tag>
        
          <tag> winston </tag>
        
          <tag> webtech </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[react + typescript에서 svg import로 사용하기]]></title>
      <url>/articles/2020-03/React-Typescript-svg-mport</url>
      <content type="text"><![CDATA[react + typescript에서 svg import로 사용하기  scss처럼 svg을 react module처럼 쓰기 위해서는 아래와 같은 처리 필요          a. 우리는 typescript이기 때문에 최초 typescript(tsc)가 알아먹도록 type정의 추가 필요      // @types/index.d.ts 에 정의// @types/index.d.ts는 tsconfig.json 에 typeRoots로 인식하게 해둠.// tsconfig.js는 webpack의 ts-loader 에서 configFile을 통해서 설정.// 따라서 webpack build을 통해서, 아래 정의가 인식됨.declare module '*.svg' {  import React = require('react');  export const ReactComponent: React.FunctionComponent&lt;React.SVGProps&lt;SVGSVGElement&gt;&gt;;  const src: string;  export default src;}  b. type스크립트 이후 react가 component형태로 알아먹게 하기 위해서, @svgr/webpack 와, url-loader 필요  c. 이제 각 webpack의 rule에 아래와 같이 svg 모듈 처리 추가 필요// webpack.config.js 에 아래 rule이 추가되어야함.{      test: /\.svg$/,      use: [        { loader: '@svgr/webpack' },        { loader: 'url-loader' },      ],}  d. 일반적인 프로젝트에서는 위 설정적용으로 완료인데, storybook은 그래도 에러 발생, 이유는 - storybook의 내장 webpack설정에 svg파일은 file-loader로 rule이 정의되어 있음. 해당 부분을 storybook webpack hook(config hook)으로 덮어 써야함// 스토리북을 사용하는경우, .storybook/main.js 에 아래와 같이 storybook의 기본 loader// file-lodaer을 override하여 svg을 exclude하고, 위 a,b,c와 같이 svg용 loader을// 추가module.exports = {  webpackFinal: async config =&gt; {    config.module.rules.push({      test: /\.(ts|tsx)$/,      use: [        {          loader: require.resolve('ts-loader'),        },        // Optional        {          loader: require.resolve('react-docgen-typescript-loader'),        },      ],    });    config.module.rules.push({      test: /\.module\.(scss|sass)$/,      use: [        { loader: 'style-loader'},        {          loader: 'css-loader',          options: { importLoaders: 1, modules: true },        }, // to convert the resulting CSS to Javascript to be bundled (modules:true to rename CSS classes in output to cryptic identifiers, except if wrapped in a :global(...) pseudo class)        { loader: 'resolve-url-loader' },        { loader: 'sass-loader' }, // to convert SASS to CSS      ],    });    config.module.rules.push({      test: /\.svg$/,      use: [        { loader: '@svgr/webpack' },        { loader: 'url-loader' },      ],    });    // NOTE: modify storybook's file-loader rule 에서 svg 룰 제거해야함 !!!!    const fileLoaderRule = config.module.rules.find(rule =&gt; rule.test.test('.svg'));    fileLoaderRule.exclude = /\.svg$/;    config.resolve.extensions.push('.ts', '.tsx');    return config;  },  stories: ['../**/*.stories.[tj]sx', './*.stories.[tj]s'],};  e. 사용// storybook이나, 실제 개발환경에서 빌드에러없이 빌드 되면 아래와 같이 사용 가능.// 1. component로 사용, react components 형태로 사용가능import { ReactComponent as TestIcon } from 'test.svg';const Test = () =&gt; &lt;TestIcon /&gt;;// 2. text(string)으로 사용, 아래처럼 import하면 svg str이 넘어옴, 사용은 img태그등의 src로 사용.import testIconSvgStr from 'test.svg';const Test = () =&gt; &lt;&gt;&lt;img src={testIconSvgSgr} /&gt;&lt;/&gt;;참고: https://stackoverflow.com/questions/54121536/typescript-module-svg-has-no-exported-member-reactcomponent참고: https://github.com/boopathi/react-svg-loader/issues/197참고: https://stackoverflow.com/questions/54292667/react-storybook-svg-failed-to-execute-createelement-on-document참고: https://www.npmjs.com/package/@svgr/webpack참고: https://medium.com/@allalmohamedlamine/react-best-way-of-importing-svg-the-how-and-why-f7c968272dd9]]></content>
      <categories>
        
          <category> react </category>
        
      </categories>
      <tags>
        
          <tag> react </tag>
        
          <tag> typescript </tag>
        
          <tag> svg </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Webpack Basic]]></title>
      <url>/articles/2020-02/Webpack-Basic</url>
      <content type="text"><![CDATA[소개webpack의 기본 개념과, webpack config을 구성하는 요소들을에 대한 개념을 이해합니다. 이를 통하여 직접 webpack 빌드 구조를 구현하거나, 이미 구현된 webpack 빌드를 이해할 수 있도록 합니다.Webpack 의 기본 개념what is webpack?참고:webpack은 최신 javascript application을 위한 module bundler 입니다. webpack은 내부적으로dependency graph 을 각각의 모듈별로 생성하고, 해당 정보를 이용하여 최종적으로 한개 또는 여러개의 bundle을 생성합니다.webpack은 node 프로그램입니다. 이는 webpack이 javascript로 구현되어 있고, 실질적으로는 node app.js을 수행하듯, node webpack.js 형태로 수행된다는 것을 의미합니다. 실제 webpack의 code을 살펴보면 shebang 형태로 webpack entry point가 구성되어 있음을 알 수 있습니다. 참고: https://github.com/webpack/webpack/blob/master/bin/webpack.jswebpack lifecycle?react나 vue처럼 명확한 문서로 정의된 lifecycle은 없지만 webpack문서의 hook와 문서 내용을 통해서 개략적인 webpack lifecycle을 알 수 있습니다.참고  https://raw.githubusercontent.com/sokra/slides/master/data/how-webpack-works.pdf  https://webpack.js.org/api/compiler-hooks/  https://github.com/fanjunzhi/lifecycle-webpack-plugin  좀더 정리된 step으로 보면 아래와 같습니다.webpack은 앞서 이야기 하였듯, javascript로 구현되어 있고, 내부적으로는 oop의 컨셉 및 plugin 구조을 사용하고 있습니다. 또한, 각 step별 hook을 제공하고 있어, 사용자가 필요한 번들 옵션이나 처리를 할 수 있도록 제공하고 있습니다.사실 일반적인 빌드 상황에서 hook이나 loader 혹은 plugin을 제작하는일은 거의 없을듯 합니다. 이미 대부분의 필요한 loader나 plugin이 구현되어 존재하고, 해당 구현체들의 이용으로 대다수의 문제가 해결 가능합니다.하지만 특이한 경우나, 특별한 경우, 기존 구현체로 해결 못하는 문제가 있을 수 있고, 이경우 webpack의 기본적인 개념과 컨셉을 이해하는것이 이러한 문제를 해결할때 도움이 됩니다. 물론 이러한 개념을 알고 있을대, 기존 webpack 설정을 이해하는데도 도움이 됩니다.Moduleswebpack config 설정항목은 아니지만, webpack이 module bundler인 만큼 중요한 개념입니다.webpack에서의 modules은 아래와 같이 표현 가능하고, 해당 모듈간의 dependencies을 webpack이 해석하게 됩니다.(dependency graph)  An ES2015 import statement  A CommonJS require() statement  An AMD define and require statement  An [@import statement](https://developer.mozilla.org/en-US/docs/Web/CSS/@import) inside of a css/sass/less file.  An image url in a stylesheet url(...) or HTML &lt;img src=...&gt; file.또한 webpack은 loader을 통해서, non-javascript에 대한 module 처리도 가능합니다. 대표적으로 지원하는 non-javascript 모듈은 아래와 같습니다.  CoffeeScript, TypeScript, ESNext (Babel), Sass, Less, Stylus, ElmWebpack concept with configEntrywebpack에게 module의 entry point을 알려주는 항목입니다. webpack은 해당 포인트로 부터 dependency graph 을 생성하게 됩니다. 위 기본 개념에 설명하였듯, webpack은 module 번들러이기 때문에 해당 graph을 통해서, 모듈을 파악하게 됩니다.// webpack.config.jsmodule.exports = {  entry: './path/to/my/entry/file.js'};entry값을 설정하지 않는경우 기본값음  ./src/index.js 입니다. entry는 하나가 아니라 여러개도 가능하며 실질적인 설정은 다음 링크를 참고하면 됩니다. 참고: webpack config entryOutputwebpack에서 생성한 bundle을 어디에 어떻게 출력(emit)할지 알려주는 항목입니다. 기본값은 ./dist/main.js 으로 되어있습니다.const path = require('path');module.exports = {  entry: './path/to/my/entry/file.js',  output: {    path: path.resolve(__dirname, 'dist'),    filename: 'my-first-webpack.bundle.js'  }};참고: webpack config outputLoaderswebpack은 entry로 부터 모듈을 이해하는데, 이때 기본적으로 javascript와 JSON파일만 이해합니다. 따라서, 추가적인 type(e.g. typescript, scss 등등)에 대한 처리를 위해서 webpack은 config상 module와 rules라는 항목을 제공합니다.해당 항목을 통해서 loader을 설정할 수 있고 loader는 dependency graph에 추가적인 type의 처리를 적용 할 수 있습니다.module.exports = {  module: {    rules: [      {        test: /\.sass$/,        use: [          // style-loader          { loader: 'style-loader' },          // css-loader          {            loader: 'css-loader',            options: {              modules: true            }          },          // sass-loader          { loader: 'sass-loader' }        ]      }    ]  }};loader(module)설정은 위 예시와 같이 배열 형태로 적용 가능합니다. 이는 동일한 파일에 대해서 여러개의 loader을 적용 할 수 있다는 것을 알려줍니다.이때 주의해야 할점은 적용한 loader가 배열상 뒤에서 부터(Stack처럼) 적용된다는 부분입니다.위 예시의 경우 sass-loader → css-loader → style-loader 순서로 loader가 적용됩니다.다시한번 remind해보면, webpack은 entry로 부터 module을 해석하는데 이때 module-rules에 적용한 loader을 통해서 추가적인 처리가 가능하다고 보면 됩니다.참고: webpack concept loader, webpack config loader(module)Pluginsloader가 특정 type(moule type)에 대해서 순차적으로 처리가 되는것과 달리, plugin은 module와 무관하게 혹은 전체 파일에 대한 처리나, loader이전의 전처리 등에 사용 가능합니다. 이는 전체 bundle구성 이후에, optimization나, minify등 원하는 동작을 추가 할 수 있음을 뜻합니다. webpack 공식 문서에서는 아래와 같이 plugin의 목적을 설명합니다.  They also serve the purpose of doing anything else that a loader cannot do.class ConsoleLogOnBuildWebpackPlugin {  apply(compiler) {    compiler.hooks.run.tap(pluginName, compilation =&gt; {      console.log('The webpack build process is starting!!!');    });  }}module.exports = {  entry: './path/to/my/entry/file.js',  output: {    filename: 'my-first-webpack.bundle.js',    path: path.resolve(__dirname, 'dist')  },  module: {    rules: [      {        test: /\.(js|jsx)$/,        use: 'babel-loader'      }    ]  },  plugins: [    new webpack.ProgressPlugin(),    new HtmlWebpackPlugin({template: './src/index.html'}),    new ConsoleLogOnBuildWebpackPlugin(),  ]};plugin은 그 구현 방법에 따라서, 해당 plugin의 실행 시점을 조정 할 수 있습니다. 따라서 webpack config을 구성할때, loader와 plugin을 같이 구성하는 경우, loader는 entry point로 부터, plugin은 해당 플러그인의 구현에 따라 실제 config action이 수행되는 것을 이해하는게 중요합니다.plugin의 경우 각각의 plugin의 구현상 수행시점이 다르기 때문에 plugin 배열의 설정순서는 크게 중요하지는 않습니다.참고: webpack config plugin, webpack concept pluginResolvewebpack에서 module의 resolution을 설정하는 config값이다. 보통 확장자 정의를 사용하거나, alias정의를 사용하여 복잡한 import 구문을 간략하게 표현하는데 사용된다.module.exports = {  //...  resolve: {    alias: {      Utilities: path.resolve(__dirname, 'src/utilities/'),      Templates: path.resolve(__dirname, 'src/templates/')    }  }};// resolve가 정의가 안된 경우 복잡한 형태의 사용import Utility from '../../utilities/utility';// resolve가 정의된 경우 깔끔한 형태로 사용 가능import Utility from 'Utilities/utility';참고: webpack config resolveTargetwebpack이 최종적으로 컴파일하여서 출력하는 형태를 지정할 수 있습니다. 기본값은 web이고, 사용자 설정에 따라서 최종 결과물(bundle)이 구동되어지는 platform을 맞춰줄 수 있습니다.target options참고: webpack config targetModewebpack의 bulid-in optimization설정을 어떤식으로 구동할지에 대한 설정이다. 기본값은 production  입니다.module.exports = {  mode: 'development'};mode options참고: webpack config modeproduction mode일때, 코드 optimization및 unglufy등을 기본적으로 수행해 줍니다.devServerwebpack 번들링 완료 이후, output에 출력되는 결과물을 테스트 하려면, 독립적인 server을 구동하고, 해당 거버로 부터 실제 html이나 js을 호출 하면서 테스트 해야 한다. 이러한 동작을 webpack에서는 devServer로 제공하고 있다. devServer 옵션 사용시, webpack 명령어 대신 webpack-dev-server 명령어를 사용해야 하고, 내부적으로 Express 서버에 in-memory disk로 output을 생성하여 구동된다.var path = require('path');module.exports = {  //...  devServer: {    contentBase: path.join(__dirname, 'dist'),    compress: true,    port: 9000,  }};보통 개발 환경에서 사용하고, in-memory로 구동된다는 점을 주의해야 한다.참고: webpack config devServerwriteToDisk 옵션 조정으로 in-memory가 아니라 실제 file을 write 도 가능하다.webpack programmaticallywebpack이 node프로그램으로 구현되어 있기때문에 또다른 node application에서 webpack을 programmatically하게 구동 가능하다.const webpack = require('webpack');webpack({  // Configuration Object}, (err, stats) =&gt; { // Stats Object  if (err || stats.hasErrors()) {    // Handle errors here  }  // Done processing});// runcompiler.run((err, stats) =&gt; { // Stats Object  // ...});// watchconst watching = compiler.watch({  // Example watchOptions  aggregateTimeout: 300,  poll: undefined}, (err, stats) =&gt; { // Stats Object  // Print watch/build result here...  console.log(stats);});참고: webpack node interface해당 기능을 이용해서, server에서 실시간 build나, webpack build을 해주는 api등의 구현이 가능하고, 그외 빌드 구성 자체를 config파일이 아닌 형태로 구현하는 것 또한 가능하다.]]></content>
      <categories>
        
          <category> bundler </category>
        
      </categories>
      <tags>
        
          <tag> webpack </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[shebang?]]></title>
      <url>/articles/2020-02/shebang</url>
      <content type="text"><![CDATA[소개shebang에 대하여 개념  및 실제 사용법에 대해서 간략하게 알아봅니다.참고: https://en.wikipedia.org/wiki/Shebang_(Unix)개념설명unix 계열의 명령어나 스크립트 파일을 실제 코드로 살펴보면 ‘#!’ 로 시작되는 코드를 볼 수 있습니다.이를 영어로 shebang이라 표현하고 쉬뱅 정도로 발음하면 됩니다. sharp(#) + bang(!) 에서 유래되었다고 합니다.’#!’은 2Byte의 매직넘버(magic number)로 이 스크립트를 실행시켜줄 프로그램의 경로를 지정하는 역활을 합니다.#!/bin/bash#!/bin/node...보통 unix시스템에서 /bin 하위에 해당 명령어들이 존재하지만, 정확하게 해당 path에 존재하지 않는 경우도 많습니다. 따라서 이러한 경우, env를 지정하여, 각 환경에 env에 정의된 path을 참조하게 할 수 있습니다.#!/usr/bin/env bash#!/usr/bin/env node...대체로 다양한 환경을 지원하는게 좋기 때문에 ‘env’형태로 shebang을 구성하는게 추천됩니다.실제 사용법실제로는 생성하려는 script나 command 파일의 최상단에 shebang을 기입하고, 그외 부분에 해당 shebang환경에서 구동되는 코드를 작성하면 됩니다. 아래 예제는 node shebang을 사용하여 unix의 ls -al 을 대체하는 lsall 예제입니다.lsall#!/usr/bin/env nodeconst { spawn } = require('child_process')const runCommand = async (command, options) =&gt; {  return new Promise((resolve, reject) =&gt; {    const prc = spawn(command, [...options], {      cwd: process.cwd(),    });    let result = '';    prc.stdout.on('data', (data) =&gt; {      result += data.toString();    });    prc.stderr.on('data', reject);    prc.on('close', (code) =&gt; {      resolve(result);    });  });};runCommand('ls', ['-al'])  .then((result) =&gt; console.log(result))  .catch(() =&gt; console.error('ls -al Failed...'));lsall파일에 excution설정(chmod +x lsall)이 되어 있다면, 실행시 node 명령어를 앞에 붙일 필요 없이 ./lsall 형태로 바로 수행 가능합니다.]]></content>
      <categories>
        
          <category> tech talk </category>
        
      </categories>
      <tags>
        
          <tag> shebanf </tag>
        
          <tag> unix </tag>
        
          <tag> tech basic </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[React SSR]]></title>
      <url>/articles/2020-02/React-SSR</url>
      <content type="text"><![CDATA[소개기본적인 SSR(Server Side Rendering)의 개념 이해 및 React의 SSR에 대해서 살펴보고, React에서 좀더 심화된 형태의 SSR을 지원하는 방법에 대해서 알아봅니다. 이를 통해서 직접 React SSR을 구성하거나, 이미 구성된 React SSR의 구조 및 코드 파악을 할 수 있게 합니다.SSR 의 기본 개념  기본적으로  SSR은 서버 연산을 통해서 Page(HTML)을 만들고, 해당 Page을 응답(response)하여서 그리는 형태입니다. 사실 static한 html을 응답하여서 화면이 그려지는 page는 SSR을 하였다고 봐도 크게 다르지 않습니다.  쉽게 이해하자면, React나 Vue등을 사용하여 Render하는 경우를 떠올리면 됩니다. 이 경우 아래와 같이 Render를 호출하여 그리게 되는데, 위 그림과 같이 사용자가 실제 화면(Content)을 보기까지 SSR에 비해서 시간이 좀 더 걸리게 됩니다.ReactDOM.render(&lt;App&gt;, document.getElementById('root'));보통 SSR의 장단점은 아래와 같습니다.SSR 장점  SEO(Search Engine Optimization, 검색 엔진 최적화)  빠르게 사용자에게 기본적인 화면을 보여 줄 수 있다.SSR 단점  화면 이동시 화면 깜빡임(UX)          각 라우팅 별로 실제 서버와의 통신을 통해서 Page가 서빙 되기 때문에 발생합니다.        프로젝트 구성이 복잡해진다.          먼저 서버 코드에 있어서도 JSX를 사용할 수 있도록 빌드나 변환하는 과정이 필요      React가 제공하는 SSRReact 공식 문서를 살펴보면, SSR기능을 제공하기 위해서 React는 SSR전용 Render함수들을 제공합니다.참고: https://reactjs.org/docs/react-dom-server.html간략하게 살펴보면 다음과 같습니다.  ReactDOMServer.renderToString(element)          HTML string을 리턴 합니다. 사용자에게 빠르게 초기 화면 응답을 줄 수 있습니다.      ReactDOM.hydrate() 함수를 동일 element에 대해서 client에서 호출한 경우, 이미 그려진 dom을 그대로 사용하면서, event handler만 추가해 줍니다.          // 개념 이해를 위한 코드 입니다.  const Home = () =&gt; (    &lt;div&gt;      Home View !!!!@@@      &lt;li&gt;        &lt;Link to={RoutesPath.Search}&gt;Go Search&lt;/Link&gt;      &lt;/li&gt;    &lt;/div&gt;  );  // 위와 같은 Home React Component을 호출하면?  const html = ReactDOMServer.renderToString(Home);  // html은 아래와 같이 설정됩니다.  const html =  `&lt;div&gt;      Home View !!!!@@@      &lt;li&gt;        &lt;Link to={RoutesPath.Search}&gt;Go Search&lt;/Link&gt;      &lt;/li&gt;  &lt;/div&gt;`        ReactDOMServer.renderToStaticMarkup(element)          renderToString 와 동일하게 동작하지만, React가 내부적으로 사용하는 extra DOM attributes을 생성하지 않습니다. (e.g. data-reactroot)      React을 static page처럼 사용할때 유용하지만, interactive한 page을 만들때는 사용하지 말아야 합니다.        ReactDOMServer.renderToNodeStream(element)          renderToString 와 동일하지만, 차이점이 있다면, HTML을 stream형태로 만들어 줍니다.      공식 문서상 해당 stream은 renderToString이 생성하는 결과와 완벽하게 일치합니다.                  The HTML output by this stream is exactly equal to what ReactDOMServer.renderToString would return.                    리턴하는 stream은  utf-8 포멧으로 encoding되어 있습니다. 만약 다른 형태의 encoding을 사용하려면 별도의 encode, decode 라이브러리를 사용해야 합니다.        ReactDOMServer.renderToStaticNodeStream(element)          renderToStaticMarkup의 stream버전입니다.      위 함수들은 모두 Server에서 구동해야 합니다. 서버에서 구동해서 HTML을 받아서 response하는 형태 입니다.React에서는 기본적으로 위와 같이 SSR을 지원해주는 함수들을 제공 하고 있습니다. React는 Javascript Lib이기 때문에 보통 이러한 함수를 Server에서 구동 시에는 Node.js 서버를 통해서 구동하게 됩니다.SSR이 string 형태와 stream형태로 나누어 진다는 사실을 알 수 있습니다. 작은 크기의 html인 경우는 큰 차이가 없거나 string형태가 더 빠른 경우가 있지만, 어느정도 size가 큰 경우, stream 형태는 말 그대로 html stream을 response하기 때문에 성능 상 좀 더 빠른 이점이 있습니다.React SSR에서 Code Split &amp; Code Lazy Loading하기React가 기본적으로 SSR을 지원하지만, Code Split이나 Code Lazy Loading등을 SSR에서 잘 지원하지 못해서, 해당 기능을 제공하는 별도의 Lib을 사용하는 것이 좋습니다. @loadable/component 는 React SSR + Code Split + Lazy Loading을 지원하는 대표적인 Lib중 하나입니다.@loadable/component 소개  참고: https://loadable-components.com/docs/getting-started/  loadable/component는 사실 SSR에 앞서, Code Split와 Lazy Loading을 지원하기 위해 나왔습니다. 따라서 굳이 SSR을 하지 않더라도, 사용성 높은 Lib입니다.  추가적으로 React가 제공하는 기본 lazy보다 SSR및 Lazy Loading시 더 좋은 기능을 제공하고 있습니다.  또한 webpack 와 babel에 호환성이 높아 해당 형태의 프로젝트 구성을 쉽게 할 수 있습니다.@loadable/component 로 React SSR하기  React SSR을 구현하는 코드로 설명합니다.Client Codeimport { loadableReady } from '@loadable/component'loadableReady(() =&gt; {  const root = document.getElementById('main')  hydrate(&lt;App /&gt;, root)})  loadable component는 기본적으로 script을 async하게 load하고 동시에 필요한 script을 parallel하게 로딩 합니다. 따라서 해당 script의 사용가능(ready)을 체크하고 사용하도록 하고 있습니다.Webpack Config (client code)const LoadablePlugin = require('@loadable/webpack-plugin')module.exports = {  // ...  plugins: [new LoadablePlugin()],}  LoadablePlugin을 필수로 추가해 주어야 합니다. 해당 plugin은 Server에서 사용하게 되는, loadable-stats.json 파일을 생성합니다.  loadable-stats.json 파일은 클라이언트 build시 Code Split 되어지는 Component의 Chunk 관련 ‘이름’, ‘위치’, ‘크기’ 등의 정보를 가지게 됩니다.Babel Config{  "plugins": ["@loadable/babel-plugin"]}  babel 변경시 정보를 추가하거나, 기존 정보가 누락되지 않도록 해당 플러그인을 추가 해줍니다.Server (Node) - Normal(String)import { ChunkExtractor } from '@loadable/server'// This is the stats file generated by webpack loadable pluginconst statsFile = path.resolve('../dist/loadable-stats.json')// We create an extractor from the statsFileconst extractor = new ChunkExtractor({ statsFile })// Wrap your application using "collectChunks"const jsx = extractor.collectChunks(&lt;YourApp /&gt;)// Render your applicationconst html = ReactDOMServer.renderToString(jsx)// You can now collect your script tagsconst scriptTags = extractor.getScriptTags() // or extractor.getScriptElements();// You can also collect your "preload/prefetch" linksconst linkTags = extractor.getLinkTags() // or extractor.getLinkElements();// And you can even collect your style tags (if you use "mini-css-extract-plugin")const styleTags = extractor.getStyleTags() // or extractor.getStyleElements();const html = `&lt;html&gt;  &lt;head&gt;${linkTags}&lt;/head&gt;  &lt;body&gt;    &lt;div id="root"&gt;${html}&lt;/div&gt;  &lt;/body&gt;&lt;/html&gt;`res.send(html);  loadable-stats.json 파일을 사용해서 서버에서 필요한 component을 extract합니다.  extract한 파일을 이용하여, ReactDOMServer의 SSR함수를 통해서 html을 생성합니다.  추가로, prefetch, style, SSR이후 Client Render(interactive page)을 위한 파일을 얻을 수 있습니다.  마지막으로 FULL HTML을 생성하여 response합니다.Server (Node) - Streamimport { renderToNodeStream } from 'react-dom/server'import { ChunkExtractor } from '@loadable/server'// if you're using express.js, you'd have access to the response object "res"// typically you'd want to write some preliminary HTML, since React doesn't handle thisres.write('&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;')const statsFile = path.resolve('../dist/loadable-stats.json')const chunkExtractor = new ChunkExtractor({ statsFile })const jsx = chunkExtractor.collectChunks(&lt;YourApp /&gt;)const stream = ReactDOMServer.renderToNodeStream(jsx)// you'd then pipe the stream into the response object until it's donestream.pipe(res, { end: false })// and finalize the response with closing HTMLstream.on('end', () =&gt;  res.end(`${chunkExtractor.getScriptTags()}&lt;/body&gt;&lt;/html&gt;`),)  stream형태의 경우 string형태와 조금 다르게 구동됩니다.  stream의 경우, React의 SSR 함수를 통해서 얻은 stream객체를 통해서 response을 수행합니다.  string형태와 동일하게 stream 완료  시점(stream.on(‘end’))에 script tag을 추가하여, SSR이후 Client Render(interactive page)을 구현 할 수 있습니다.Streaming rendering 의 경우  prefetch  은 지원하지 않습니다.React Module Style And SSRModule Style 이란?참고: https://create-react-app.dev/docs/adding-a-stylesheet일반적으로 style(css)은 js코드와 별개로 html상에서 loading됩니다. module style은 이와 달리, js파일에서 style을 load 하고 해당 style을  bind(사용)하는 형태의 코드를 말합니다.Button.css.Button {  padding: 20px;}Button.jsimport React, { Component } from 'react';import './Button.css'; // Tell webpack that Button.js uses these stylesclass Button extends Component {  render() {    // You can use them as regular CSS styles    return &lt;div className="Button" /&gt;;  }}module style이 react에서 공식적으로 말하는 표준이나, 권장사항은 아닙니다. 하지만 많은 개발자들이 해당 형태의 구현의 편의성과 유용성 때문에 module style의 구현을 많이 사용하는 편입니다.참고: https://medium.com/seek-blog/block-element-modifying-your-javascript-components-d7f99fcab52bModule Style의 구동module style은 사실 실제 module은 아니고 사실은 css text입니다. 따라서, css text가 module처럼 동작하게 하는 부분이 필요합니다. 해당 부분은 보통 webpack와 같은 bundler(compiler)에서 인식하여, module 형태로 만들어 줍니다.webpack.config{  test: /\.module\.(scss|sass)$/,  use: [    (() =&gt; {      if (target === 'web') {				// to inject the result into the DOM as a style block        return { loader: 'style-loader' };      }			// extract style(css) file      return {        loader: MiniCssExtractPlugin.loader,      };    })(),    {      loader: 'css-loader',      options: { importLoaders: 1, modules: true },    }  ]},webpack에서, js코드 내부에 module style import구문이 존재하는경우, 해당 구문을 어떻게 처리해야 할지 module rules에 정의 할 수 있습니다.module style을 사용했을때, ‘style-loader’을 사용시, style 태그가 해당 js사용시  document.head.appendChild 형태로 동적으로 추가되게 됩니다.Module Style SSR에서의 문제점 및 해결법module style을 사용할때, SSR에서는 server side 는 node환경이고, 이때는 document 객체(host 객체)가 존재하지 않기때문에 syntax에러가 발생하게 됩니다.따라서, module style을 사용하고, SSR을 사용하는 경우, 이러한 문제를 해결하기 위해서는 server render용 module style 처리와 client render용 module style처리를 분리하거나, 또는 항상 css을 extract하는 처리가 필요합니다.  style 처리를 분리하는 경우, target node 형태의 webpack bundle 파일에서는 style import가 제외되고, targer web 형태의 webpack bundle 파일에서는 style-loader에 의해서 동적으로 style을 추가 하게 됩니다.  항상 css exteact하는 경우, js에 의해서 동적으로 style이 추가되지 않기 때문에  SSR시 style tag을 넣어주고, 해당 style 요청에 의해서 style이 load되도록 해주는 처리가 필요합니다. React의 SSR을 @loadable/component 형태로 구성하는 경우 style tags얻을 수 있기 때문에 SSR시 손쉽게 style을 넣어 줄 수 있습니다.module style 와  styled component는 약간 내용이 다릅니다. styled component는 module style 개념을 도입하여 style을 component화 하고, 해당 component을 통해서, style을 적용하는 방법입니다. 따라서 styled component는 별개의 모듈(dependency)을 node_modules에 설치해야 하고, 일종의 HoC(high order component)나 context(provider)처럼, style을 적용하려는 component을 감싸는 형태의 구현이 필요합니다.참고: styled component: https://styled-components.com/docs/basics#motivationReact Router And SSR참고: https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/server-rendering.md일반적으로 React Router을 사용하는 경우와 달리 SSR을 사용하는 경우, StaticRouter을 사용해야 합니다.// client&lt;BrowserRouter&gt;  &lt;App/&gt;&lt;/BrowserRouter&gt;// server (not the complete story)&lt;StaticRouter  location={req.url}  context={context}&gt;  &lt;App/&gt;&lt;/StaticRouter&gt;이는 동일 코드에 대해서, server용 client용 entry을 별개로 가져가거나, SSR시 staticRouter을 직접적으로 사용해야함을 의미 합니다. 따라서 webpack config 와 ssr(server code) 설정을 통해서 React Router사용시 SSR을 정상적으로 지원 가능하도록 코드를 구성해야 합니다.기타  Next.js등을 사용하는 경우 client side render와 server side render을 코드에서 구분 가능합니다. 어떻게 가능할까요?          실제 React에서 Render의 Start Point는 React가 제공하는 Render함수를 호출하면서 시작됩니다. 즉 ReactDOM.render(), ReactDOM.hydrate(), ReactDOMServer.renderToString(), ReactDOMServer.renderToNodeStream() 을 통해서, 구분이 가능합니다.      실제 Component의 props으로의 구분의 경우, INITIAL_DATA **나 props을 통해 **data을 props 으로 넘겨서 clinet에서 그려진(호출된) render인지, server에서 그려진(호출된) render인지를 구별 할 수 있습니다.      ]]></content>
      <categories>
        
          <category> react </category>
        
      </categories>
      <tags>
        
          <tag> react </tag>
        
          <tag> ssr </tag>
        
          <tag> webpack </tag>
        
          <tag> module-style </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Polyfill, Transform, 브라우저 하위호환 지원하기]]></title>
      <url>/articles/2020-02/Polyfill-Transform</url>
      <content type="text"><![CDATA[소개polyfill 와 transform을 이용하여 브라우저 하위환을 맞추는 방법에 대해서 간략하게 설명합니다.브라우저 하위호환?javascript 언어가 발전하고, 해당 언어가 구동되는 browser역시 발전하면서, 최신 javascript언어의 문법이 old 브라우저에서는 구동 안되는 문제가 발생하게 되었습니다. 이를 해결하여, 최신 javascript언어 &amp; 문법을 사용해도, old 브라우저에서 구동되게 하는것이 브라우저 하위호환 입니다.old 브라우저에서 지원하지 않는 javascript사용시 아래와 같이 구문에러가 발생하게 됩니다.하위호환을 하는 방법결론적으로 보면, old 브라우저에서 구동 가능한 형태로, 현재 구현되어있는 javascript을 변경(transform)해 주거나, 미지원 내장 함수에 대해서 javascript level에서 해당 함수를 직접 구현하여 넣어주는 형태(polyfill)로 가능합니다. 이밖에  실제 코드가 구동되는 run-time에 실시간으로 변경처리도 가능하지만 real(deploy)환경에서는 성능이슈등이 있음으로 추천되지 않습니다(물론 경우에 따라서 유연하게 사용가능합니다).Polyfillold 브라우저에서 미지원되고 있는 내장 함수나 기능을 넣어주는 방식 입니다.예를들어, Object.assign 은 es6(ECMA 2015) 문법으로, 아래와 같이 IE10이하에서는 지원되지 않습니다.참고: https://caniuse.com/#search=object.assign따라서 해당 기능(Object.assign)을 IE10 이하에서 지원하고 싶다면, ‘본인이 직접 Object.assign’을 구현하거나, 구현된 하위호환용 Object.assign을 적용해 주면 됩니다.// 직접 구현했다고 가정했을때..., Object.keys랑 arrow fn은 있다고 가정Object.assign = (a, b) =&gt; {  let newObj = {};  Object.keys(a, (key) =&gt; newObj[key] = a[key]);  Object.keys(b, (key) =&gt; newObj[key] = b[key]);  return newObj;};// 위 로직이 구동된 이후에 Object.assign은 구문에러가 나지 않음.Polyfill의 기본 컨셉은 위와 같이 old browser에서는 browser객체(함수)로 존재하지 않는 기능을 직접 넣어줍니다.위의 예제를 보면 알겠지만 문제는, 이 직접 만든 구현체의 내용역시 old browser에서 구동되는 형태로 만들어야 하고, 해당 구현체의 로직이 탄탄해야(메모리 누수가 없고, spec을 모두 지원하고, 등등…)합니다.실제 위 Object.assign의 polyfill을 검색해보면 아래와 같이 여러가지 polyfill구현체를 찾아 볼 수 있습니다.  Object.assign 여러 polyfill 구현체들          https://github.com/rubennorte/es6-object-assign      https://github.com/christiansany/object-assign-polyfill/blob/master/index.js      https://vanillajstoolkit.com/polyfills/objectassign/      https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/object-assign.js  (babel에서 사용)      등등…      사실 여러 구현체들중 본인 기능에 문제 없이 동작한다면 어떤걸 사용해도 무방합니다. 하지만 가장 많이 사용한 어느정도 검증된 방식이 bable의 polyfill을 사용하는 방식입니다.Transformold브라우저에서 미지원되고 있는 함수나 문법을 지원되는 함수나 문법으로 코드를 변경해 주는 방식입니다.polyfill와는 다르게 원본 코드자체가, old browser에서 구동되는 형태로 바꾸어서 들어가게 됩니다. 예를 들어 arrow function은 es6(ECMA 2015) 문법으로, 아래와 같이 IE11이하에서는 지원되지 않습니다.참고: https://caniuse.com/#feat=arrow-functions이경우 함수 레벨이 아닌 문법 자체가 미지원되고 있기 때문에 원본 코드가 바뀌어야 합니다.// 아래와 같은 코드가 있다면const gseok = {  arrowFnTest: () =&gt; console.log('test')};// 변경되어서 IE11도 이해할수 있는 문법으로 코드 자체가 바뀌어야함var gseok = {  arrowFnTest: function arrowFnTest() {    return console.log('test');  }};transform의 경우, 개발자가 애시당초 old 브라우저에서 지원되는 문법으로 개발하지 않는한, 수동으로 코드를 변경하기는 거의 불가능하기 때문에, 보통 빌드 시점에 javascript code compiler을 통해서, 최신코드 → old 브라우저가 이해가능한 코드, 로 변환해서 적용하게 됩니다.이때 사용하게 되는 javascript code compiler가 업계 de facto인 babel이 됩니다.How?브라우저 하위 호환 개념과 두가지 방식에 대해서 알아보았습니다. 해당 방식을 실제 어떤식으로 적용해야하는지에 대해서 설명합니다.Polyfill을 직접 구현해서 넣어주거나, Transform이 불필요하게 애시당초 old 브라우저가 이해하도록 구현할 수도 있지만, 보통 최신 javascript 문법으로 프로젝트를 구현하고, 빌드 시점에 compiler을 통해서 이를 변경하는 형태를 취하게 됩니다.여기서는 거의 업계 표준(de facto)인  babel을 이용해서 polyfill 및 transform을 하는 방식을 간략하게 설명합니다.babel 기본 개념babel은 javascript compiler로 원본 js(or ts)을 받아서 설정된 option(빌드 config) 에 따라서 컴파일된 결과물을 생성합니다.// babeloriginal.js → babel → compiled.js// java[original.java](http://original.java) → javac  → original.jar보통 다른 언어의 컴파일러처럼 babel역시 cli로 컴파일을 수행 할 수 있습니다.$ npx babel a.js --out-file a-compiled.js --config-file babel.config.json참고: cli https://babeljs.io/docs/en/babel-cli참고: configfile https://babeljs.io/docs/en/config-filesbabel 번들러와 같이 쓰기babel이 defacto이기 떄문에 거의 모든 번들러에서는 babel compile을 지원합니다. 여기서는 webpack 번들러를 사용했을때 babel을 적용하는 방법에 대해서 설명합니다.webpack.config.jsmodule: {      rules: [        {          test: /\.tsx?$/,          use: [            {              loader: 'babel-loader',              options: {                presets: [                  [                    '@babel/preset-env',                    {                      targets: {                        browsers: ['last 2 versions', 'ie &gt;= 8'],                      },                      debug: true,                      useBuiltIns: 'usage',                      corejs: { version: 3, proposals: true },                    },                  ],                  '@babel/preset-react',                ],              },            },            {              loader: 'ts-loader',              options: {                configFile: path.resolve(__dirname, './tsconfig.json'),              },            },        }     ]}  webpack에 babel-loader을 적용하면, cli을  통해서  compile을 하는것과 동일하게, 코드를 compile할 수 있습니다.  해당 loader의 option설정은 cli을 통해서 compile할때 적용하는 babel의 config설정과 동일합니다.@babel/preset-env?polyfill이나, transform을 할때, 각각의 종류와 type이 여러개가 존재하게 됩니다. 해당 polyfill이나, transform을 하나의 set로 묶어서 제공하는게 babel의 preset-env입니다.// e.g) 아래와 같은 부분이 다 set으로 묶여서 같이 들어 있음!core-js(-pure)/es|stable|features/stringcore-js(-pure)/es|stable|features/string/from-code-pointcore-js(-pure)/es|stable|features/string/rawcore-js(-pure)/es|stable|features/string/code-point-atcore-js(-pure)/es|stable|features/string/ends-withcore-js(-pure)/es|stable|features/string/includescore-js(-pure)/es|stable|features/string/starts-withcore-js/es|stable|features/string/matchcore-js(-pure)/es|stable|features/string/match-allcore-js(-pure)/es|stable|features/string/repeatcore-js(-pure)/es|stable|features/string/pad-startcore-js(-pure)/es|stable|features/string/pad-endcore-js/es|stable|features/string/replacecore-js/es|stable|features/string/searchcore-js/es|stable|features/string/splitcore-js(-pure)/es|stable|features/string/trimcore-js(-pure)/es|stable|features/string/trim-startcore-js(-pure)/es|stable|features/string/trim-endcore-js(-pure)/es|stable|features/string/trim-leftcore-js(-pure)/es|stable|features/string/trim-rightcore-js(-pure)/es|stable|features/string/anchorcore-js(-pure)/es|stable|features/string/bigcore-js(-pure)/es|stable|features/string/blink...babel의 예전 버전에서는, 개발자가 필요한 polyfill이나 transform을 직접 하나씩 설정하는 형태를 취했는데, babel 버전이 올라가고, corejs을 사용하면서, corejs을 활용한 형태로 변경되었습니다.참고: https://babeljs.io/docs/en/babel-preset-env실제 polyfill 및 transform 설정useBuiltIns  기본값은 false입니다. ‘entry’나 ‘usage’을 사용할 수 있고, 실제 polyfill파일인 core-js을 같이 설정해주어야 합니다.      entry      // entry 포함방식과 동일합니다. 즉 아래 case는 모두 동일합니다.  // 1. webpack.config.js에 entry 활용  {    entry: ['core-js', '/src/index.js']  }  // 2. 실제 소스 코드의 entry 코드에서 import  // index.js라고 가정했을때, 해당 파일 최상단에  import 'core-js';  // 3. webpack의 bable-loader의 babel-preset-evn의 useBuiltIns 설정  {    loader: 'babel-loader',    options: {      presets: [        [          '@babel/preset-env',          {            targets: {              browsers: ['last 2 versions', 'ie &gt;= 8'],            },            debug: true,            useBuiltIns: 'entry',            corejs: { version: 3, proposals: true },          },        ],        '@babel/preset-react',      ],    },  },        usage          기존 entry방식은 현재 내 코드에서 필요한 polyfill이나 transform이외 불필요한 모든 polyfill와 transform이 같이 추가되는 문제가 있음.      usage을 사용하면, entry포인트로부터 모든 파일을 탐색하면서 해당 파일에 필요한 polyfill와 transform을 추리고, 해당 부분을 중복되지 않게 추가해줍니다.                usage와 직접 polyfill 추가 복합 사용도 가능합니다.      // entry 파일에 import  import 'core-js/es/map';  import 'core-js/es/set';  import 'core-js/es/object/assign';  // webpack에서 usage  [    '@babel/preset-env',    {      targets: {        browsers: ['last 2 versions', 'ie &gt;= 8'],      },      debug: true,      useBuiltIns: 'usage',      corejs: { version: 3, proposals: true },    },  ],      ]]></content>
      <categories>
        
          <category> bundler </category>
        
      </categories>
      <tags>
        
          <tag> polyfill </tag>
        
          <tag> transform </tag>
        
          <tag> babel </tag>
        
          <tag> webpack </tag>
        
          <tag> devops </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Debug breakpoint ignored 문제 수정]]></title>
      <url>/articles/2020-02/Debug-breakpoint-ignored</url>
      <content type="text"><![CDATA[소개node project을 진행중에 폴더 구조 변경 이후 아래와 같이 “breakpoint ignored” 가 발생하면서, 코드 디버깅을 IDE(vscode, intellij, 등)에서 하지 못하는 문제가 발생하였다. 하여 해당 문제의 발생 원인 및 해결 방법에 대해서 간략하게 설명한다.원인해당 문제가 발생하는 이유는 ts이건 js이건 빌드 이후 생성한 debug용 “*.map” 파일에 기록되어 있는,  원본(original) 코드 위치 및 loader위치가, 실제 해당 프로젝트의 원본 코드(original code)의 위치가 맞지 않아서 발생하는 문제이다.해당 문제가 발생했을때, 상황을 좀더 빠르게 확인하려면, dubug용 빌드시 명확하게 path가 보이는 옵션으로 빌드하여 “*.map” 파일을 열어서 확인해보는게 좋다.// webpack을 사용하는 경우 devtool 설정을 "source-map" 으로 한다.{  devtool: "source-map",}문제가 발생하는 경우 예제  원본 소스 위치: /packages/pr-server/src/routes/ping.route.ts  디버그 map파일에 기록된 소스 위치: webpack:///./src/routes/ping.route.ts  빌드 결과 위치          /dist/pr-server/server.js      /dist/pr-server/server.js.map      위 예제와 같은 경우 IDE(vscode, intellij, 등)에서는 map파일에 기록된 소스 위치로 원본 소스를 찾게 되는데, 실제 위치에 해당 파일이 없기 때문에 debug point가 정상 동작하지 않게 된다.해결 방법원인이 명확하기 때문에 원인을 해결하면 문제를 해결 할 수 있다. 원인을 해결 하는 방법은 아래와 같이 2가지가 존재 할 수 있다.  IDE에서 map파일에 기록된 path을, 실제 original source file 위치로 다시 mapping  build시점에 debug용 source map을 생성할때, 명확한 source path로 map파일이 생성되도록 설정사용하고 있는 IDE와, bundler에 따라서 조금씩 방법이 다르겠지만, 핵심은 결국 위 2가지 방법으로 해결 할 수 있다. 여기서는 IDE(vscode) 인 경우와, bundler(webpack)인 경우 해결 방법에 대해서 설명한다.IDE(VSCode)설정을 이용해서, debug 파일(*.map)의 path을 설정하기VSCode의 경우 debug launch을 할때, “launch.json” 에 debug run configuration을 설정할 수 있다. 이때  launch.json의 “sourceMapPathOverrides” 설정을 이용해서, debug point 미스 매칭을 해결 할 수 있다.// vscode의 launch.json 설정 예제{  "version": "0.2.0",  "configurations": [    {      "type": "node",      "request": "attach",      "name": "Attach by Process ID",      "protocol": "inspector",      "port": 9331,      "restart": true,      // 아래 3개의 설정을 추가해 주면 된다. 그중 핵심은 "sourceMapPathOverrides" 설정이다.      "sourceMaps": true,      "trace": true,      "sourceMapPathOverrides": { "webpack:///./src/*": "${workspaceRoot}/packages/pr-server/src/*" }    }  ]}위 예제의 경우, 디버그 “*.map” 파일에 미스 매칭된 relative path을 실제 origin source code path로 설정해 주고 있다.이후 vscode에서 debug launch을 시도해보면 정상적으로 debug point가 기동됨을 확인 할 수 있다.Bundler(Webpack)설정을 변경하여, debug 파일(*.map)생성시 path을 명확하게 설정하기webpack의 경우, debug 설정을 “devtool” 을 사용하게 되어 있는데, 이때 output설정에 “devtool”의 부가 설정이 가능하다.참고: https://webpack.js.org/configuration/output/#outputdevtoolmodulefilenametemplate가장 간단한 방법은 아래 예제와 같이 webpack의 output설정중 devtoolModuleFilenameTemplate 설정을 absolute path로 주는 형태이다.예제// webpack.config.js{  devtool: "source-map",  output: {    path: path.resolve(rootPath, `dist/${packageJSON.name}`),    filename: '[name].js',    chunkFilename: '[name].js',    // 아래 devtoolModuleFilenameTemplate 설정이 핵심이다.    devtoolModuleFilenameTemplate: '[absolute-resource-path]',  },...}위 예제와 같은 형태로 build시도시 아래와 같이 absoulte path설정이 된 debug “*.map” 파일을 볼 수 있다.해당 설정에서 IDE의 기본설정으로 아래와 같이 break point가 정상 동작됨을 확인 할 수 있다.요약  원인: debug 정보상 원본 source 에 대한 path 미스 매칭  해결: path미스매칭을 맞추어 주면 됨          IDE의 debug run 설정에서 맞추거나      Bundler에서 debug 모드 빌드시 map 파일의 path설정을 맞추어 줌        추가: 각 IDE와 bundler마다 설정방법이 다를수 있다. 해당 부분은 잘 찾아서 맞추어 주어야 한다. 여기서는  vscode와 webpack 사용시 해결방법에 대하여 설명하였다.]]></content>
      <categories>
        
          <category> troubleshooting </category>
        
      </categories>
      <tags>
        
          <tag> vscode </tag>
        
          <tag> webpack </tag>
        
          <tag> debug </tag>
        
          <tag> nodejs </tag>
        
          <tag> devops </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[DOM 스샷찍기(Svg & Canvas & DOM)]]></title>
      <url>/articles/2020-01/DOM-screenshot</url>
      <content type="text"><![CDATA[소개  svg, canvas, 일반 DOM이 섞여 있는 Web Page을 브라우저에서 screenshot을 생성하기 위한 web tech tip에 대해서 이야기 합니다.Web에서 스크린샷 생성하는 Lib  html2canvas          doc: https://html2canvas.hertzen.com/      git: https://github.com/niklasvh/html2canvas/      web에서 screenshot을 생성하는 대표적인 lib가 존재합니다. 해당 lib는 screenshot을 생성하기 위한 타겟 dom을 canvas에 draw하여서 screenshot을 생성합니다.보통 일반적인 web page의 경우 큰 문제 없이 구동되지만, 복잡한 구조의 page인 경우, 특히 IE에서 아래와 같은 문제가 발생 할 수 있습니다.html2canvas의 문제  svg: svg → canvas로 draw할때, SecurityError가 발생하여, svg가 그려지지 않음          ref: https://html.spec.whatwg.org/multipage/canvas.html#security-with-canvas-elements      ref: https://github.com/eligrey/canvas-toBlob.js/issues/21      ref: https://github.com/niklasvh/html2canvas/issues/201      https://github.com/niklasvh/html2canvas/issues/1543        image: image → canvas시 canvas의 tainted error가 발생          ref: https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image      html2canvas lib을 IE에서 사용시 특히나 위 문제가 많이 발생합니다. 그 이유는 svg태그를 모두 parsing하고 분석해서 svg → canvas로 직접 draw하는 형태가 아니라. image을 사용하는 trick을 사용하고 있기 때문입니다.  httml2canvas에서 svg의 처리는 아래와 같습니다.          svg → string으로 변환(serializeToString)      svg text(string) 을 new image 하고      image src에 ‘data:image/svg+xml’형태로 설정      이후 해당 image을 canvas에 drawImage함          export class SVGElementContainer extends ElementContainer {    svg: string;    intrinsicWidth: number;    intrinsicHeight: number;    constructor(img: SVGSVGElement) {      super(img);      const s = new XMLSerializer();      this.svg =  			`data:image/svg+xml,${encodeURIComponent(s.serializeToString(img))}`;      this.intrinsicWidth = img.width.baseVal.value;      this.intrinsicHeight = img.height.baseVal.value;      CacheStorage.getInstance().addImage(this.svg);    }  }        위 과정이후 문제가 발생합니다. 위 image → canvas시 tainted error가 발생결국 html2canvas lib에서의 svg처리 문제로, svg가 잘 그려지지 않는 문제가 발생하고, 근본적으로는 web상에서 canvas가 tained 되었을때, 이를 외부에서 사용가능한 형태로의 변환 시도시 에러가 발생합니다.Image을 canvas에 그렸을때 tained 문제  crossOrigin = “Anonymous”; 설정이 Img 가 onLoad되기 이전에 설정 되어 있어야 해당 문제가 발생하지 않습니다.  이미 dom 상에 img가 있는데 해당 img에 위 attribute가 없는 경우, img을 xhr로 load하고, load한 data을 읽어서 crossOrigin = “Anonymous” 가 미리 설정된 img을 만들어 해당 img에 다시 이미지를 그리는 형태로 회피를 합니다.// proxy 코드 스닙private proxy(src: string): Promise&lt;string&gt; {  const proxy = this._options.proxy;  if (!proxy) {      throw new Error('No proxy defined');  }  const key = src.substring(0, 256);  return new Promise((resolve, reject) =&gt; {      const responseType = FEATURES.SUPPORT_RESPONSE_TYPE ? 'blob' : 'text';      const xhr = new XMLHttpRequest();      xhr.onload = () =&gt; {          if (xhr.status === 200) {              if (responseType === 'text') {                  resolve(xhr.response);              } else {                  const reader = new FileReader();                  reader.addEventListener('load', () =&gt; resolve(reader.result as string), false);                  reader.addEventListener('error', e =&gt; reject(e), false);                  reader.readAsDataURL(xhr.response);              }          } else {              reject(`Failed to proxy resource ${key} with status code ${xhr.status}`);          }      };			xhr.open('GET', `${proxy}?url=${encodeURIComponent(src)}&amp;responseType=${responseType}`);	...}// proxy 가 필요한 경우 ==&gt; CORS을 재설정 하는 경우if (useProxy) {	src = await this.proxy(src);}Logger.getInstance(this.id).debug(`Added image ${key.substring(0, 256)}`);return await new Promise((resolve, reject) =&gt; {    const img = new Image();    img.onload = () =&gt; resolve(img);    img.onerror = reject;    //ios safari 10.3 taints canvas with data urls unless crossOrigin is set to anonymous    if (isInlineBase64Image(src) || useCORS) {        img.crossOrigin = 'anonymous';    }    img.src = src;    if (img.complete === true) {        // Inline XML images may fail to parse, throwing an Error later on        setTimeout(() =&gt; resolve(img), 500);    }    if (this._options.imageTimeout &gt; 0) {        setTimeout(            () =&gt; reject(`Timed out (${this._options.imageTimeout}ms) loading image`),            this._options.imageTimeout        );    }});canvas tained?  canvas에 img나 svg을 draw할때, 해당 svg or img(원본)에 CORS 설정(attribute)을 보고 해당 설정이 없는 원본을 draw한 canvas는 tained된(더럽혀졌어…) canvas로 browser에서 판단됩니다.  tained된 canvas아래 동작 시도시 Security Error가 발생합니다.          Calling [getImageData()](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData) on the canvas’s context      Calling [toBlob()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob) on the [&lt;canvas&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas) element itself      Calling [toDataURL()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL) on the canvas        그 이외의 동작은 가능합니다.          따라서, 원본 소스에서 허락하지 않은 경우, low data변환이나 외부 반출에 제약이 발생합니다.      security &amp; tained error 회피하기canvgcanvg는 svg을 canvas로 변경해주는 대표적인 lib 입니다. html2canvas와 다르게 canvg는 svg의 내용을 직접 parsing하고 해석하여, 해당 그림을 canvas에 그려줍니다.  git: https://github.com/canvg/canvgcanvg가 생성하는 canvas에 그려진 svg는 실질적으로는 canvas에 메뉴얼하게 그린 pure한 canvas이기 때문에 security나 tained error가 발생하지 않습니다.html2canvas + canvg 조합하여 회피하기html2canvas에서는, 목적하는 dom을 clone하여 이용하고, 해당 cloned dom은 canvas로 그려지기 전에 수동으로 이미지, 스타일 등을 조정 할 수 있는 callback api을 제공합니다.따라서, html2canvas에 svg부분만 canvg로 그려서 대체하면, 실질적으로 html2canvas을 이용해서 이미지를 생성 할 수 있습니다.// pseudo codehtml2canvas(targetElement, {	onclone: clonedDoc =&gt; {	  // svg to canvas		const svg = clonedDoc.querySelector('svg');	  if (svg) {      const canvas = Canvg.fromString(svg.innerHTML).render();			const parent = svg.parentElement;			svg.remove();      parent.appendChild(canvas);		}	}}DOM to Canvasdom object을 canvas에 그리는 가장 일반 적인 방법을 소개합니다.참고: http://man.hubwiz.com/docset/JavaScript.docset/Contents/Resources/Documents/developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Drawing_DOM_objects_into_a_canvas.htmlconst DOMURL = window.URL || window.webkitURL || window;const canvas = document.createElement('canvas');const ctx = canvas.getContext('2d');canvas.width = 200;canvas.height = 200;const data =		 `&lt;svg xmlns="http://www.w3.org/2000/svg" width="200" height="200"&gt;        &lt;foreignObject width="100%" height="100%"&gt;          &lt;div xmlns="http://www.w3.org/1999/xhtml" style="font-size:40px"&gt;            &lt;em&gt;I&lt;/em&gt; like            &lt;span style="color:white; text-shadow:0 0 2px blue;"&gt;            cheese&lt;/span&gt;          &lt;/div&gt;        &lt;/foreignObject&gt;      &lt;/svg&gt;`;const svg = new Blob([data], {type: 'image/svg+xml;charset=utf-8'});const url = DOMURL.createObjectURL(svg);const img = new Image();img.onload = function () {  ctx.drawImage(img, 0, 0);  DOMURL.revokeObjectURL(url);}img.src = url;document.body.appendChild(canvas);  svg의 foreignObject을 이용하여 내부에 dom을 그리고, svg → image → canvas에 그리는 형태입니다.  단 IE에서는 지원하지 않고 있습니다. ref: https://caniuse.com/#search=foreignobject  html2canvas의 경우, foreignObject을 지원하는 경우 위와 같은 방법으로 canvas에 그리고, 만약 foreignObject을 지원하지 않는 경우, dom tree을 모두 parsing하면서 각각의 element type에 따라서, size(bound), style, text등을 계산하여 직접 canvas에 그림을 그립니다. ref: https://github.com/niklasvh/html2canvas/blob/master/src/render/canvas/canvas-renderer.ts정리  DOM → Image(Canvas)는 foreignObject을 사용하는 경우 생각보다 어렵지 않게 변환 가능합니다.  DOM에 SVG나 Image가 존재하는 경우 Security 문제가 있을 수 있습니다.          Image: attribute에 crossOrigin = “Anonymous”; 설정으로 회피 가능 합니다.      svg: canvg등으로 svg → canvas로 직접 그리는 형태로 회피 가능 합니다.        대다수의 간략한 DOM Tree의 경우 문제없이 기본적인 lib사용으로 이미지 생성이 가능합니다.  만약 SVG나 Image에 의해 문제가 발생할 경우 위와 같은 회피 방법을 활용하여 이미지 생성을 할 수 있습니다.추가사항  html2canvas의 경우, 내부적으로 target이 되는 dom tree만 clone하는게 아니라. full window(document)을 모두 clone하여 동작합니다. 따라서 document의 크기에 따라서, document의 dom tree가 매우 복잡하고 많은 경우, 500ms 이상 느리게 동작 할 수 있습니다.  이미지 생성을 해야하는 부분에 DOM보다는 SVG나 Image로만 되어 있다면, 직접 SVG, Image를 Canvas에 그려서 이미지로 생성하는게 성능상 이점이 큽니다.]]></content>
      <categories>
        
          <category> tech talk </category>
        
      </categories>
      <tags>
        
          <tag> javascript </tag>
        
          <tag> dom </tag>
        
          <tag> canvas </tag>
        
          <tag> svg </tag>
        
          <tag> webtech </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Jenkins Abort]]></title>
      <url>/articles/2019-10/Jenkins-Abort</url>
      <content type="text"><![CDATA[소개약간 시대에 뒤떨어지는 UI/UX &amp; 사용법으로, 사용자들이 많이 이탈하였지만, 아직도 Top20 등으로 CI/CD Tool검색시 항상 포함되는 정통의 강자가 Jenkins 이다. 여기서는, Jenkins의 Abort(Cancel) action에 대한 후처리(post control or after control)를 별도의 plugin설치 없이 simple하게 하는 방법에 대하여 설명한다.why needed?  현재 프로젝트에서, 서버로 API를 쏘는 CLI을 사용중인데, Jenkins에서 Cancel하여도, 실제 Build or Deploy동작은 Cancel되지 않는 문제가 있음.  해결방법으로, Jenkins에서 Cancel하면, 해당 동작을 감지하여 서버에 Cancel API을 호출하여 실제 Build or Deploy동작을 Cancel처리 하고자 함.pre required knowledgeJenkins 관련  Jenkins Basic          open source: https://github.com/jenkinsci/jenkins      Java Program (war), java -jar jenkins.war --httpProt=8080      Java 8 이상 환경에서 어디서나 실행 가능(Multiple OS Support)      분산 빌드 지원      다양한 플러그인 지원      커스텀 플러그인 지원        Jenkins Build Step (Execute Shell)          사실 Java에서 Runtime.exec or ProcessBuilder와 다를바 없음      즉 하나의 Execute Shell은 하나의 Child Process가 되어 독립적으로 수행됨      Kubernetes 관련  Kubectl CLI          쿠버네티스를 컨트롤 할수 있는 CLI Tool      kubectl 명령어로 Kubernetes Cluster와 상호 작용 할 수 있다.      kubectl은 실질적으로는 Kubernetes의 API를 사용한다.                  API 설명                    problem  jenkins의 build step에서 kubernetes의 helm등을 수행했을때, 사용자가 jenkins job을 cancel(abort) 한경우, jenins job은 stop되지만, helm run은 cancel되지 않는 문제가 있음  원인은 위 기본 개념에서 말했듯, 실질적으로 kubectl command가 api call이기때문에, 명령어가 kubernetes cluster에 들어가고 나서 취소 명령어가 들어오기 전까지는 계속 수행이 되고 있기 때문임solution  jenkins의 cancel동작시 해당 동작을 감지하고, any action을 할 수 있게 하면 됨Jenkins Abort Action  jenkins에서 cancel을 누르면, TERM 시그널을 현재 Job의 process group에 발생시킨다.  이후 해당 job에서 수행(spawns)한 subprocess는 모두 TERM이 되고, “Finished: ABORTED” 메시지를 출력하면서, jenkins의 job 수행이 stop된다.TERM Signal Handle  singal은 unix계열의 운영체제에서, IPC용도 혹은, process control을 위해 만들어진 async한 event(signal)이다.  unix계열의 운영체제에서는 이러한 signal을 핸들링 할수 있는 C함수(System Call API) 및 CLI command(user command)명령어을 제공한다.  signal 핸들링 명령어중 [trap](http://man7.org/linux/man-pages/man1/trap.1p.html)은 시그널 발생을 감지하여, command을 실행하는게 가능한 명령어 이다.Jenkins에서 Abort감지해서 사용자정의 동작하게 하기  위 내용들을 조합하여 아래와 같은 간략한 script을 통해서, jenkins의 abort을 감지하고, 감지이후 사용자정의 동작을 구현 할 수 있다.  아래코드는 jenkins의 excutable script의 한 예이다.#!/bin/bash# abort control #######################################################getAbort () { echo "--- Caution!! Abort detected ---" echo "&gt; Launch The Post Script for Jenkins Aborted after 3sec" for i in {1..3} do   echo "."   sleep 1 done PENDING_NAME=`kubectl get build | grep some-dev- | grep Pending | awk '{print $1}'` if [[ -z "$PENDING_NAME" ]]; then    echo "PENDING_NAME is Empty" else    echo 'Build: '"$PENDING_NAME"' is Canceled'    kubectl pipeline cancel $PENDING_NAME fi}trap 'getAbort; exit' SIGHUP SIGINT SIGTERM####################################################################### check current clusterkubectl get pods# This Step is real Build &amp; Deploy# run pipeline# 핵심은 jenkins로 아래와 같이 kubernates의 pipeline빌드를 돌리다가.# kubernates가 아닌 jenkins에서 stop(cancel)을 시켯을때# kubernates도 stop시키기임, jenkins의 stop버튼은 위의 getAbort가 감지하고# kubectl pipeliine cancel로 stop시킨다.# 따라서 jenkins도 stop되고, 실제 kubernates pipe도 stop된다.kubectl pipeline run --skip-approval --wait some-dev-project# These Steps are checking the Build &amp; Deploy# check pipeline resultkubectl get instancekubectl get servicekubectl get pods# ping testcurl --insecure -v https://some-project/ping# 특이하게도, jenkins의 Execute shell step에서 trap 명령어 하위에, 또다른 명령어 하나가 있어야 정상 동작하는 경우가 있음. 간단히 print하는걸 넣어주면됨.  위와같은 상황에서, Jenkins UI상에서 Cancel수행시 정상적으로, abort을 감지하여 getAbort함수가 수행되는것을 확인 할 수 있다.refrence  Jenkins: https://jenkins.io/doc/  Kubernetes: https://kubernetes.io/ko/docs  Jenkins Abort          stackoverflow: https://stackoverflow.com/questions/32065516/detect-jenkins-build-abort-event      when you cancel a jenkins job: https://gist.github.com/datagrok/dfe9604cb907523f4a2f        signal: https://en.wikipedia.org/wiki/Signal_(IPC)  signal api: http://man7.org/linux/man-pages/man2/signal.2.html  signal man 2 and 7: https://stackoverflow.com/questions/25828288/what-is-the-difference-between-signal7-and-signal2  linux trap: https://www.joinc.co.kr/w/Site/Tip/Signal_trap  linux trap man: http://man7.org/linux/man-pages/man1/trap.1p.html]]></content>
      <categories>
        
          <category> ci </category>
        
      </categories>
      <tags>
        
          <tag> jenkins </tag>
        
          <tag> kubernates </tag>
        
          <tag> unix </tag>
        
          <tag> linux </tag>
        
          <tag> devops </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
