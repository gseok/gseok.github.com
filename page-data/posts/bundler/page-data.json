{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/bundler","result":{"pageContext":{"currentCategory":"bundler","categories":["All","tech-talk","troubleshooting","bundler","react","ci"],"edges":[{"node":{"id":"7982c4a0-5858-5fb0-b2e3-71821866184c","excerpt":"소개 Node.js 환경에서 https설정하는 방법을 설명한다. 현재 은 이미 ,  가 존재한다. 다만 해당 파일이 파일로 되어있고, 현재는 의 https의 설정용으로 되어 있다. 또한 현재 nginx용 ssl은 을 받게 되어 있다. 따라서, node에서 해당 ssl(cert, key)을 바로 사용하는 경우 에러가 발생한다. 현재 이미 있는 nginx용 ssl을 node.js(webpack-dev-server)에서 사용하는 방법을 설명한다. Node.js 에서 https설정하기 정상적인 ssl(cert, key)가 존재하는 경우 아래와 같은 코드로 https설정이 가능하다. 공식Doc - https://nodejs.org/api/https.html Node의 공식 문서에서 알 수 있는 사실 확장자가 , , , 을 다 지원 가능 ca을 넣지 않아도 무방 pass을 넣는 부분은 없음 Express에서 https설정하기 가장 기본이 되는 Node의 설정과 거의 동일하다. 는 내부적으로 …","fields":{"slug":"/tech-talk-2021/2021-02-04-SSL-setting-webpack-dev-server/"},"frontmatter":{"categories":"tech-talk bundler","title":"SSL, Https 설정 in Node.js And webpack dev server","date":"February 04, 2021"}},"next":{"fields":{"slug":"/tech-talk-2020/2020-03-18-Node-Env/"}},"previous":{"fields":{"slug":"/tech-talk-2021/2021-06-11-pm2-logroate-not-working/"}}},{"node":{"id":"2f7c2f5a-6bfc-5ebf-96b5-e98e982965bb","excerpt":"소개 webpack의 기본 개념과, webpack config을 구성하는 요소들을에 대한 개념을 이해합니다. 이를 통하여 직접 webpack 빌드 구조를 구현하거나, 이미 구현된 webpack 빌드를 이해할 수 있도록 합니다. Webpack 의 기본 개념 what is webpack? 참고:  webpack은 최신 javascript application을 위한 module bundler 입니다. webpack은 내부적으로dependency graph 을 각각의 모듈별로 생성하고, 해당 정보를 이용하여 최종적으로 한개 또는 여러개의 bundle을 생성합니다. webpack은 node 프로그램입니다. 이는 webpack이 javascript로 구현되어 있고, 실질적으로는 node app.js을 수행하듯, node webpack.js 형태로 수행된다는 것을 의미합니다. 실제 webpack의 code을 살펴보면 shebang 형태로 webpack entry point가 구성되어 있음을 …","fields":{"slug":"/tech-talk-2020/2020-02-21-Webpack-Basic/"},"frontmatter":{"categories":"tech-talk bundler","title":"Webpack Basic","date":"February 21, 2020"}},"next":{"fields":{"slug":"/tech-talk-2020/2020-02-19-shebang/"}},"previous":{"fields":{"slug":"/tech-talk-2020/2020-03-01-React-Typescript-svg-import/"}}},{"node":{"id":"be6c2f7c-a141-5fff-91b4-ed7f0e93eac2","excerpt":"소개 polyfill 와 transform을 이용하여 브라우저 하위환을 맞추는 방법에 대해서 간략하게 설명합니다. 브라우저 하위호환? javascript 언어가 발전하고, 해당 언어가 구동되는 browser역시 발전하면서, 최신 javascript언어의 문법이 old 브라우저에서는 구동 안되는 문제가 발생하게 되었습니다. 이를 해결하여, 최신 javascript언어 & 문법을 사용해도, old 브라우저에서 구동되게 하는것이 브라우저 하위호환 입니다. old 브라우저에서 지원하지 않는 javascript사용시 아래와 같이 구문에러가 발생하게 됩니다.  하위호환을 하는 방법 결론적으로 보면, old 브라우저에서 구동 가능한 형태로, 현재 구현되어있는 javascript을 변경(transform)해 주거나, 미지원 내장 함수에 대해서 javascript level에서 해당 함수를 직접 구현하여 넣어주는 형태(polyfill)로 가능합니다. 이밖에  실제 코드가 구동되는 run-time에…","fields":{"slug":"/tech-talk-2020/2020-02-08-Polyfill-Transform/"},"frontmatter":{"categories":"tech-talk bundler","title":"Polyfill, Transform, 브라우저 하위호환 지원하기","date":"February 08, 2020"}},"next":{"fields":{"slug":"/tech-talk-2020/2020-02-06-Debug-breakpoint-ignored/"}},"previous":{"fields":{"slug":"/tech-talk-2020/2020-02-17-React-SSR/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}